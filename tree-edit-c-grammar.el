;;; tree-edit-c-grammar.el --- Description -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Ethan Leba
;; Author: Ethan Leba <ethanleba5@gmail.com>
;; SPDX-License-Identifier: GPL-3.0-or-later
;; Version: 0.1.0
;; Package-Requires: ((emacs "27.0"))
;; Homepage: https://github.com/ethan-leba/tree-edit
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;; This is an autogenerated file from 'tree-edit-generate-grammars.el' that contains the grammar
;; and other precalculations for the c language. Please do not manually modify this!
;;
;;; Code:
(require 'mode-local)
(require 'tree-edit)

(setq-mode-local
 c-mode

 tree-edit-grammar
 '
((translation_unit (type . "REPEAT")
		   (content (type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . function_definition))
				     ((type . "SYMBOL")
				      (name . linkage_specification))
				     ((type . "SYMBOL")
				      (name . declaration))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . case_statement))
					       ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . labeled_statement))
							 ((type . "SYMBOL")
							  (name . compound_statement))
							 ((type . "SYMBOL")
							  (name . expression_statement))
							 ((type . "SYMBOL")
							  (name . if_statement))
							 ((type . "SYMBOL")
							  (name . switch_statement))
							 ((type . "SYMBOL")
							  (name . do_statement))
							 ((type . "SYMBOL")
							  (name . while_statement))
							 ((type . "SYMBOL")
							  (name . for_statement))
							 ((type . "SYMBOL")
							  (name . return_statement))
							 ((type . "SYMBOL")
							  (name . break_statement))
							 ((type . "SYMBOL")
							  (name . continue_statement))
							 ((type . "SYMBOL")
							  (name . goto_statement))))))
				     ((type . "SYMBOL")
				      (name . type_definition))
				     ((type . "SEQ")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . struct_specifier))
							 ((type . "SYMBOL")
							  (name . union_specifier))
							 ((type . "SYMBOL")
							  (name . enum_specifier))
							 ((type . "SYMBOL")
							  (name . macro_type_specifier))
							 ((type . "SYMBOL")
							  (name . sized_type_specifier))
							 ((type . "SYMBOL")
							  (name . primitive_type))
							 ((type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . type_identifier))))
					       ((type . "STRING")
						(value . ";"))))
				     ((type . "SYMBOL")
				      (name . preproc_if))
				     ((type . "SYMBOL")
				      (name . preproc_ifdef))
				     ((type . "SYMBOL")
				      (name . preproc_include))
				     ((type . "SYMBOL")
				      (name . preproc_def))
				     ((type . "SYMBOL")
				      (name . preproc_function_def))
				     ((type . "SYMBOL")
				      (name . preproc_call)))))
 (_top_level_item (type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . function_definition))
			   ((type . "SYMBOL")
			    (name . linkage_specification))
			   ((type . "SYMBOL")
			    (name . declaration))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . case_statement))
				     ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . labeled_statement))
					       ((type . "SYMBOL")
						(name . compound_statement))
					       ((type . "SYMBOL")
						(name . expression_statement))
					       ((type . "SYMBOL")
						(name . if_statement))
					       ((type . "SYMBOL")
						(name . switch_statement))
					       ((type . "SYMBOL")
						(name . do_statement))
					       ((type . "SYMBOL")
						(name . while_statement))
					       ((type . "SYMBOL")
						(name . for_statement))
					       ((type . "SYMBOL")
						(name . return_statement))
					       ((type . "SYMBOL")
						(name . break_statement))
					       ((type . "SYMBOL")
						(name . continue_statement))
					       ((type . "SYMBOL")
						(name . goto_statement))))))
			   ((type . "SYMBOL")
			    (name . type_definition))
			   ((type . "SEQ")
			    (members ((type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . struct_specifier))
					       ((type . "SYMBOL")
						(name . union_specifier))
					       ((type . "SYMBOL")
						(name . enum_specifier))
					       ((type . "SYMBOL")
						(name . macro_type_specifier))
					       ((type . "SYMBOL")
						(name . sized_type_specifier))
					       ((type . "SYMBOL")
						(name . primitive_type))
					       ((type . "ALIAS")
						(content (type . "SYMBOL")
							 (name . identifier))
						(named . t)
						(value . type_identifier))))
				     ((type . "STRING")
				      (value . ";"))))
			   ((type . "SYMBOL")
			    (name . preproc_if))
			   ((type . "SYMBOL")
			    (name . preproc_ifdef))
			   ((type . "SYMBOL")
			    (name . preproc_include))
			   ((type . "SYMBOL")
			    (name . preproc_def))
			   ((type . "SYMBOL")
			    (name . preproc_function_def))
			   ((type . "SYMBOL")
			    (name . preproc_call))))
 (preproc_include (type . "SEQ") (members ((type . "ALIAS") (content (type . "PATTERN") (value . "#[ 	]*include")) (named . :json-false) (value . \#include)) ((type . "FIELD") (name . "path") (content (type . "CHOICE") (members ((type . "SYMBOL") (name . string_literal)) ((type . "SYMBOL") (name . system_lib_string)) ((type . "SYMBOL") (name . identifier)) ((type . "ALIAS") (content (type . "SYMBOL") (name . preproc_call_expression)) (named . t) (value . call_expression))))) ((type . "STRING") (value . "
"))))
 (preproc_def (type . "SEQ") (members ((type . "ALIAS") (content (type . "PATTERN") (value . "#[ 	]*define")) (named . :json-false) (value . \#define)) ((type . "FIELD") (name . "name") (content (type . "SYMBOL") (name . identifier))) ((type . "FIELD") (name . "value") (content (type . "CHOICE") (members ((type . "SYMBOL") (name . preproc_arg)) ((type . "BLANK"))))) ((type . "STRING") (value . "
"))))
 (preproc_function_def (type . "SEQ") (members ((type . "ALIAS") (content (type . "PATTERN") (value . "#[ 	]*define")) (named . :json-false) (value . \#define)) ((type . "FIELD") (name . "name") (content (type . "SYMBOL") (name . identifier))) ((type . "FIELD") (name . "parameters") (content (type . "SYMBOL") (name . preproc_params))) ((type . "FIELD") (name . "value") (content (type . "CHOICE") (members ((type . "SYMBOL") (name . preproc_arg)) ((type . "BLANK"))))) ((type . "STRING") (value . "
"))))
 (preproc_params (type . "SEQ")
		 (members ((type . "IMMEDIATE_TOKEN")
			   (content (type . "STRING") (value . "(")))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . identifier))
							((type . "STRING")
							 (value . "..."))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "STRING")
									    (value . "...")))))))))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . ")"))))
 (preproc_call (type . "SEQ") (members ((type . "FIELD") (name . "directive") (content (type . "SYMBOL") (name . preproc_directive))) ((type . "FIELD") (name . "argument") (content (type . "CHOICE") (members ((type . "SYMBOL") (name . preproc_arg)) ((type . "BLANK"))))) ((type . "STRING") (value . "
"))))
 (preproc_if (type . "SEQ")
	     (members ((type . "ALIAS")
		       (content (type . "PATTERN")
				(value . "#[ 	]*if"))
		       (named . :json-false)
		       (value . \#if))
		      ((type . "FIELD")
		       (name . "condition")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . identifier))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . preproc_call_expression))
					  (named . t)
					  (value . call_expression))
					 ((type . "SYMBOL")
					  (name . number_literal))
					 ((type . "SYMBOL")
					  (name . char_literal))
					 ((type . "SYMBOL")
					  (name . preproc_defined))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . preproc_unary_expression))
					  (named . t)
					  (value . unary_expression))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . preproc_binary_expression))
					  (named . t)
					  (value . binary_expression))
					 ((type . "ALIAS")
					  (content (type . "SYMBOL")
						   (name . preproc_parenthesized_expression))
					  (named . t)
					  (value . parenthesized_expression)))))
		      ((type . "STRING")
		       (value . "
"))
		      ((type . "REPEAT")
		       (content (type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . function_definition))
					 ((type . "SYMBOL")
					  (name . linkage_specification))
					 ((type . "SYMBOL")
					  (name . declaration))
					 ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . case_statement))
						   ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . labeled_statement))
							     ((type . "SYMBOL")
							      (name . compound_statement))
							     ((type . "SYMBOL")
							      (name . expression_statement))
							     ((type . "SYMBOL")
							      (name . if_statement))
							     ((type . "SYMBOL")
							      (name . switch_statement))
							     ((type . "SYMBOL")
							      (name . do_statement))
							     ((type . "SYMBOL")
							      (name . while_statement))
							     ((type . "SYMBOL")
							      (name . for_statement))
							     ((type . "SYMBOL")
							      (name . return_statement))
							     ((type . "SYMBOL")
							      (name . break_statement))
							     ((type . "SYMBOL")
							      (name . continue_statement))
							     ((type . "SYMBOL")
							      (name . goto_statement))))))
					 ((type . "SYMBOL")
					  (name . type_definition))
					 ((type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . struct_specifier))
							     ((type . "SYMBOL")
							      (name . union_specifier))
							     ((type . "SYMBOL")
							      (name . enum_specifier))
							     ((type . "SYMBOL")
							      (name . macro_type_specifier))
							     ((type . "SYMBOL")
							      (name . sized_type_specifier))
							     ((type . "SYMBOL")
							      (name . primitive_type))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier))))
						   ((type . "STRING")
						    (value . ";"))))
					 ((type . "SYMBOL")
					  (name . preproc_if))
					 ((type . "SYMBOL")
					  (name . preproc_ifdef))
					 ((type . "SYMBOL")
					  (name . preproc_include))
					 ((type . "SYMBOL")
					  (name . preproc_def))
					 ((type . "SYMBOL")
					  (name . preproc_function_def))
					 ((type . "SYMBOL")
					  (name . preproc_call)))))
		      ((type . "FIELD")
		       (name . "alternative")
		       (content (type . "CHOICE")
				(members ((type . "CHOICE")
					  (members ((type . "SYMBOL")
						    (name . preproc_else))
						   ((type . "SYMBOL")
						    (name . preproc_elif))))
					 ((type . "BLANK")))))
		      ((type . "ALIAS")
		       (content (type . "PATTERN")
				(value . "#[ 	]*endif"))
		       (named . :json-false)
		       (value . \#endif))))
 (preproc_ifdef (type . "SEQ")
		(members ((type . "CHOICE")
			  (members ((type . "ALIAS")
				    (content (type . "PATTERN")
					     (value . "#[ 	]*ifdef"))
				    (named . :json-false)
				    (value . \#ifdef))
				   ((type . "ALIAS")
				    (content (type . "PATTERN")
					     (value . "#[ 	]*ifndef"))
				    (named . :json-false)
				    (value . \#ifndef))))
			 ((type . "FIELD")
			  (name . "name")
			  (content (type . "SYMBOL") (name . identifier)))
			 ((type . "REPEAT")
			  (content (type . "CHOICE")
				   (members ((type . "SYMBOL")
					     (name . function_definition))
					    ((type . "SYMBOL")
					     (name . linkage_specification))
					    ((type . "SYMBOL")
					     (name . declaration))
					    ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . case_statement))
						      ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . labeled_statement))
								((type . "SYMBOL")
								 (name . compound_statement))
								((type . "SYMBOL")
								 (name . expression_statement))
								((type . "SYMBOL")
								 (name . if_statement))
								((type . "SYMBOL")
								 (name . switch_statement))
								((type . "SYMBOL")
								 (name . do_statement))
								((type . "SYMBOL")
								 (name . while_statement))
								((type . "SYMBOL")
								 (name . for_statement))
								((type . "SYMBOL")
								 (name . return_statement))
								((type . "SYMBOL")
								 (name . break_statement))
								((type . "SYMBOL")
								 (name . continue_statement))
								((type . "SYMBOL")
								 (name . goto_statement))))))
					    ((type . "SYMBOL")
					     (name . type_definition))
					    ((type . "SEQ")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . struct_specifier))
								((type . "SYMBOL")
								 (name . union_specifier))
								((type . "SYMBOL")
								 (name . enum_specifier))
								((type . "SYMBOL")
								 (name . macro_type_specifier))
								((type . "SYMBOL")
								 (name . sized_type_specifier))
								((type . "SYMBOL")
								 (name . primitive_type))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . identifier))
								 (named . t)
								 (value . type_identifier))))
						      ((type . "STRING")
						       (value . ";"))))
					    ((type . "SYMBOL")
					     (name . preproc_if))
					    ((type . "SYMBOL")
					     (name . preproc_ifdef))
					    ((type . "SYMBOL")
					     (name . preproc_include))
					    ((type . "SYMBOL")
					     (name . preproc_def))
					    ((type . "SYMBOL")
					     (name . preproc_function_def))
					    ((type . "SYMBOL")
					     (name . preproc_call)))))
			 ((type . "FIELD")
			  (name . "alternative")
			  (content (type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . preproc_else))
						      ((type . "SYMBOL")
						       (name . preproc_elif))))
					    ((type . "BLANK")))))
			 ((type . "ALIAS")
			  (content (type . "PATTERN")
				   (value . "#[ 	]*endif"))
			  (named . :json-false)
			  (value . \#endif))))
 (preproc_else (type . "SEQ")
	       (members ((type . "ALIAS")
			 (content (type . "PATTERN")
				  (value . "#[ 	]*else"))
			 (named . :json-false)
			 (value . \#else))
			((type . "REPEAT")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . function_definition))
					   ((type . "SYMBOL")
					    (name . linkage_specification))
					   ((type . "SYMBOL")
					    (name . declaration))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . case_statement))
						     ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . labeled_statement))
							       ((type . "SYMBOL")
								(name . compound_statement))
							       ((type . "SYMBOL")
								(name . expression_statement))
							       ((type . "SYMBOL")
								(name . if_statement))
							       ((type . "SYMBOL")
								(name . switch_statement))
							       ((type . "SYMBOL")
								(name . do_statement))
							       ((type . "SYMBOL")
								(name . while_statement))
							       ((type . "SYMBOL")
								(name . for_statement))
							       ((type . "SYMBOL")
								(name . return_statement))
							       ((type . "SYMBOL")
								(name . break_statement))
							       ((type . "SYMBOL")
								(name . continue_statement))
							       ((type . "SYMBOL")
								(name . goto_statement))))))
					   ((type . "SYMBOL")
					    (name . type_definition))
					   ((type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . struct_specifier))
							       ((type . "SYMBOL")
								(name . union_specifier))
							       ((type . "SYMBOL")
								(name . enum_specifier))
							       ((type . "SYMBOL")
								(name . macro_type_specifier))
							       ((type . "SYMBOL")
								(name . sized_type_specifier))
							       ((type . "SYMBOL")
								(name . primitive_type))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . identifier))
								(named . t)
								(value . type_identifier))))
						     ((type . "STRING")
						      (value . ";"))))
					   ((type . "SYMBOL")
					    (name . preproc_if))
					   ((type . "SYMBOL")
					    (name . preproc_ifdef))
					   ((type . "SYMBOL")
					    (name . preproc_include))
					   ((type . "SYMBOL")
					    (name . preproc_def))
					   ((type . "SYMBOL")
					    (name . preproc_function_def))
					   ((type . "SYMBOL")
					    (name . preproc_call)))))))
 (preproc_elif (type . "SEQ")
	       (members ((type . "ALIAS")
			 (content (type . "PATTERN")
				  (value . "#[ 	]*elif"))
			 (named . :json-false)
			 (value . \#elif))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . identifier))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . preproc_call_expression))
					    (named . t)
					    (value . call_expression))
					   ((type . "SYMBOL")
					    (name . number_literal))
					   ((type . "SYMBOL")
					    (name . char_literal))
					   ((type . "SYMBOL")
					    (name . preproc_defined))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . preproc_unary_expression))
					    (named . t)
					    (value . unary_expression))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . preproc_binary_expression))
					    (named . t)
					    (value . binary_expression))
					   ((type . "ALIAS")
					    (content (type . "SYMBOL")
						     (name . preproc_parenthesized_expression))
					    (named . t)
					    (value . parenthesized_expression)))))
			((type . "STRING")
			 (value . "
"))
			((type . "REPEAT")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . function_definition))
					   ((type . "SYMBOL")
					    (name . linkage_specification))
					   ((type . "SYMBOL")
					    (name . declaration))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . case_statement))
						     ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . labeled_statement))
							       ((type . "SYMBOL")
								(name . compound_statement))
							       ((type . "SYMBOL")
								(name . expression_statement))
							       ((type . "SYMBOL")
								(name . if_statement))
							       ((type . "SYMBOL")
								(name . switch_statement))
							       ((type . "SYMBOL")
								(name . do_statement))
							       ((type . "SYMBOL")
								(name . while_statement))
							       ((type . "SYMBOL")
								(name . for_statement))
							       ((type . "SYMBOL")
								(name . return_statement))
							       ((type . "SYMBOL")
								(name . break_statement))
							       ((type . "SYMBOL")
								(name . continue_statement))
							       ((type . "SYMBOL")
								(name . goto_statement))))))
					   ((type . "SYMBOL")
					    (name . type_definition))
					   ((type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . struct_specifier))
							       ((type . "SYMBOL")
								(name . union_specifier))
							       ((type . "SYMBOL")
								(name . enum_specifier))
							       ((type . "SYMBOL")
								(name . macro_type_specifier))
							       ((type . "SYMBOL")
								(name . sized_type_specifier))
							       ((type . "SYMBOL")
								(name . primitive_type))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . identifier))
								(named . t)
								(value . type_identifier))))
						     ((type . "STRING")
						      (value . ";"))))
					   ((type . "SYMBOL")
					    (name . preproc_if))
					   ((type . "SYMBOL")
					    (name . preproc_ifdef))
					   ((type . "SYMBOL")
					    (name . preproc_include))
					   ((type . "SYMBOL")
					    (name . preproc_def))
					   ((type . "SYMBOL")
					    (name . preproc_function_def))
					   ((type . "SYMBOL")
					    (name . preproc_call)))))
			((type . "FIELD")
			 (name . "alternative")
			 (content (type . "CHOICE")
				  (members ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . preproc_else))
						     ((type . "SYMBOL")
						      (name . preproc_elif))))
					   ((type . "BLANK")))))))
 (preproc_if_in_field_declaration_list (type . "SEQ")
				       (members ((type . "ALIAS")
						 (content (type . "PATTERN")
							  (value . "#[ 	]*if"))
						 (named . :json-false)
						 (value . \#if))
						((type . "FIELD")
						 (name . "condition")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_call_expression))
								    (named . t)
								    (value . call_expression))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . preproc_defined))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_unary_expression))
								    (named . t)
								    (value . unary_expression))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_binary_expression))
								    (named . t)
								    (value . binary_expression))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_parenthesized_expression))
								    (named . t)
								    (value . parenthesized_expression)))))
						((type . "STRING")
						 (value . "
"))
						((type . "REPEAT")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . field_declaration))
								   ((type . "SYMBOL")
								    (name . preproc_def))
								   ((type . "SYMBOL")
								    (name . preproc_function_def))
								   ((type . "SYMBOL")
								    (name . preproc_call))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_if_in_field_declaration_list))
								    (named . t)
								    (value . preproc_if))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . preproc_ifdef_in_field_declaration_list))
								    (named . t)
								    (value . preproc_ifdef)))))
						((type . "FIELD")
						 (name . "alternative")
						 (content (type . "CHOICE")
							  (members ((type . "CHOICE")
								    (members ((type . "ALIAS")
									      (content (type . "SYMBOL")
										       (name . preproc_else_in_field_declaration_list))
									      (named . t)
									      (value . preproc_else))
									     ((type . "ALIAS")
									      (content (type . "SYMBOL")
										       (name . preproc_elif_in_field_declaration_list))
									      (named . t)
									      (value . preproc_elif))))
								   ((type . "BLANK")))))
						((type . "ALIAS")
						 (content (type . "PATTERN")
							  (value . "#[ 	]*endif"))
						 (named . :json-false)
						 (value . \#endif))))
 (preproc_ifdef_in_field_declaration_list (type . "SEQ")
					  (members ((type . "CHOICE")
						    (members ((type . "ALIAS")
							      (content (type . "PATTERN")
								       (value . "#[ 	]*ifdef"))
							      (named . :json-false)
							      (value . \#ifdef))
							     ((type . "ALIAS")
							      (content (type . "PATTERN")
								       (value . "#[ 	]*ifndef"))
							      (named . :json-false)
							      (value . \#ifndef))))
						   ((type . "FIELD")
						    (name . "name")
						    (content (type . "SYMBOL")
							     (name . identifier)))
						   ((type . "REPEAT")
						    (content (type . "CHOICE")
							     (members ((type . "SYMBOL")
								       (name . field_declaration))
								      ((type . "SYMBOL")
								       (name . preproc_def))
								      ((type . "SYMBOL")
								       (name . preproc_function_def))
								      ((type . "SYMBOL")
								       (name . preproc_call))
								      ((type . "ALIAS")
								       (content (type . "SYMBOL")
										(name . preproc_if_in_field_declaration_list))
								       (named . t)
								       (value . preproc_if))
								      ((type . "ALIAS")
								       (content (type . "SYMBOL")
										(name . preproc_ifdef_in_field_declaration_list))
								       (named . t)
								       (value . preproc_ifdef)))))
						   ((type . "FIELD")
						    (name . "alternative")
						    (content (type . "CHOICE")
							     (members ((type . "CHOICE")
								       (members ((type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . preproc_else_in_field_declaration_list))
										 (named . t)
										 (value . preproc_else))
										((type . "ALIAS")
										 (content (type . "SYMBOL")
											  (name . preproc_elif_in_field_declaration_list))
										 (named . t)
										 (value . preproc_elif))))
								      ((type . "BLANK")))))
						   ((type . "ALIAS")
						    (content (type . "PATTERN")
							     (value . "#[ 	]*endif"))
						    (named . :json-false)
						    (value . \#endif))))
 (preproc_else_in_field_declaration_list (type . "SEQ")
					 (members ((type . "ALIAS")
						   (content (type . "PATTERN")
							    (value . "#[ 	]*else"))
						   (named . :json-false)
						   (value . \#else))
						  ((type . "REPEAT")
						   (content (type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . field_declaration))
								     ((type . "SYMBOL")
								      (name . preproc_def))
								     ((type . "SYMBOL")
								      (name . preproc_function_def))
								     ((type . "SYMBOL")
								      (name . preproc_call))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_if_in_field_declaration_list))
								      (named . t)
								      (value . preproc_if))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_ifdef_in_field_declaration_list))
								      (named . t)
								      (value . preproc_ifdef)))))))
 (preproc_elif_in_field_declaration_list (type . "SEQ")
					 (members ((type . "ALIAS")
						   (content (type . "PATTERN")
							    (value . "#[ 	]*elif"))
						   (named . :json-false)
						   (value . \#elif))
						  ((type . "FIELD")
						   (name . "condition")
						   (content (type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . identifier))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_call_expression))
								      (named . t)
								      (value . call_expression))
								     ((type . "SYMBOL")
								      (name . number_literal))
								     ((type . "SYMBOL")
								      (name . char_literal))
								     ((type . "SYMBOL")
								      (name . preproc_defined))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_unary_expression))
								      (named . t)
								      (value . unary_expression))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_binary_expression))
								      (named . t)
								      (value . binary_expression))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_parenthesized_expression))
								      (named . t)
								      (value . parenthesized_expression)))))
						  ((type . "STRING")
						   (value . "
"))
						  ((type . "REPEAT")
						   (content (type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . field_declaration))
								     ((type . "SYMBOL")
								      (name . preproc_def))
								     ((type . "SYMBOL")
								      (name . preproc_function_def))
								     ((type . "SYMBOL")
								      (name . preproc_call))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_if_in_field_declaration_list))
								      (named . t)
								      (value . preproc_if))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . preproc_ifdef_in_field_declaration_list))
								      (named . t)
								      (value . preproc_ifdef)))))
						  ((type . "FIELD")
						   (name . "alternative")
						   (content (type . "CHOICE")
							    (members ((type . "CHOICE")
								      (members ((type . "ALIAS")
										(content (type . "SYMBOL")
											 (name . preproc_else_in_field_declaration_list))
										(named . t)
										(value . preproc_else))
									       ((type . "ALIAS")
										(content (type . "SYMBOL")
											 (name . preproc_elif_in_field_declaration_list))
										(named . t)
										(value . preproc_elif))))
								     ((type . "BLANK")))))))
 (preproc_directive (type . "PATTERN") (value . "#[ \\t]*[a-zA-Z]\\w*"))
 (preproc_arg (type . "TOKEN")
	      (content (type . "PREC")
		       (value . -1)
		       (content (type . "REPEAT1")
				(content (type . "PATTERN")
					 (value . ".|\\\\\\r?\\n")))))
 (_preproc_expression (type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . identifier))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . preproc_call_expression))
				(named . t)
				(value . call_expression))
			       ((type . "SYMBOL")
				(name . number_literal))
			       ((type . "SYMBOL")
				(name . char_literal))
			       ((type . "SYMBOL")
				(name . preproc_defined))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . preproc_unary_expression))
				(named . t)
				(value . unary_expression))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . preproc_binary_expression))
				(named . t)
				(value . binary_expression))
			       ((type . "ALIAS")
				(content (type . "SYMBOL")
					 (name . preproc_parenthesized_expression))
				(named . t)
				(value . parenthesized_expression))))
 (preproc_parenthesized_expression (type . "SEQ")
				   (members ((type . "STRING")
					     (value . "("))
					    ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . identifier))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . preproc_call_expression))
						       (named . t)
						       (value . call_expression))
						      ((type . "SYMBOL")
						       (name . number_literal))
						      ((type . "SYMBOL")
						       (name . char_literal))
						      ((type . "SYMBOL")
						       (name . preproc_defined))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . preproc_unary_expression))
						       (named . t)
						       (value . unary_expression))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . preproc_binary_expression))
						       (named . t)
						       (value . binary_expression))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . preproc_parenthesized_expression))
						       (named . t)
						       (value . parenthesized_expression))))
					    ((type . "STRING")
					     (value . ")"))))
 (preproc_defined (type . "CHOICE")
		  (members ((type . "PREC")
			    (value . 14)
			    (content (type . "SEQ")
				     (members ((type . "STRING")
					       (value . "defined"))
					      ((type . "STRING")
					       (value . "("))
					      ((type . "SYMBOL")
					       (name . identifier))
					      ((type . "STRING")
					       (value . ")")))))
			   ((type . "SEQ")
			    (members ((type . "STRING")
				      (value . "defined"))
				     ((type . "SYMBOL")
				      (name . identifier))))))
 (preproc_unary_expression (type . "PREC_LEFT")
			   (value . 13)
			   (content (type . "SEQ")
				    (members ((type . "FIELD")
					      (name . "operator")
					      (content (type . "CHOICE")
						       (members ((type . "STRING")
								 (value . "!"))
								((type . "STRING")
								 (value . "~"))
								((type . "STRING")
								 (value . "-"))
								((type . "STRING")
								 (value . "+")))))
					     ((type . "FIELD")
					      (name . "argument")
					      (content (type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . identifier))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . preproc_call_expression))
								 (named . t)
								 (value . call_expression))
								((type . "SYMBOL")
								 (name . number_literal))
								((type . "SYMBOL")
								 (name . char_literal))
								((type . "SYMBOL")
								 (name . preproc_defined))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . preproc_unary_expression))
								 (named . t)
								 (value . unary_expression))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . preproc_binary_expression))
								 (named . t)
								 (value . binary_expression))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . preproc_parenthesized_expression))
								 (named . t)
								 (value . parenthesized_expression))))))))
 (preproc_call_expression (type . "PREC")
			  (value . 14)
			  (content (type . "SEQ")
				   (members ((type . "FIELD")
					     (name . "function")
					     (content (type . "SYMBOL")
						      (name . identifier)))
					    ((type . "FIELD")
					     (name . "arguments")
					     (content (type . "ALIAS")
						      (content (type . "SYMBOL")
							       (name . preproc_argument_list))
						      (named . t)
						      (value . argument_list))))))
 (preproc_argument_list (type . "SEQ")
			(members ((type . "STRING")
				  (value . "("))
				 ((type . "CHOICE")
				  (members ((type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . identifier))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . preproc_call_expression))
								(named . t)
								(value . call_expression))
							       ((type . "SYMBOL")
								(name . number_literal))
							       ((type . "SYMBOL")
								(name . char_literal))
							       ((type . "SYMBOL")
								(name . preproc_defined))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . preproc_unary_expression))
								(named . t)
								(value . unary_expression))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . preproc_binary_expression))
								(named . t)
								(value . binary_expression))
							       ((type . "ALIAS")
								(content (type . "SYMBOL")
									 (name . preproc_parenthesized_expression))
								(named . t)
								(value . parenthesized_expression))))
						     ((type . "REPEAT")
						      (content (type . "SEQ")
							       (members ((type . "STRING")
									 (value . ","))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . identifier))
										  ((type . "ALIAS")
										   (content (type . "SYMBOL")
											    (name . preproc_call_expression))
										   (named . t)
										   (value . call_expression))
										  ((type . "SYMBOL")
										   (name . number_literal))
										  ((type . "SYMBOL")
										   (name . char_literal))
										  ((type . "SYMBOL")
										   (name . preproc_defined))
										  ((type . "ALIAS")
										   (content (type . "SYMBOL")
											    (name . preproc_unary_expression))
										   (named . t)
										   (value . unary_expression))
										  ((type . "ALIAS")
										   (content (type . "SYMBOL")
											    (name . preproc_binary_expression))
										   (named . t)
										   (value . binary_expression))
										  ((type . "ALIAS")
										   (content (type . "SYMBOL")
											    (name . preproc_parenthesized_expression))
										   (named . t)
										   (value . parenthesized_expression)))))))))
					   ((type . "BLANK"))))
				 ((type . "STRING")
				  (value . ")"))))
 (preproc_binary_expression (type . "CHOICE")
			    (members ((type . "PREC_LEFT")
				      (value . 10)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "+")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 10)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "-")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 11)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "*")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 11)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "/")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 11)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "%")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 1)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "||")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 2)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "&&")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 3)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "|")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 4)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "^")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 5)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "&")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 6)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "==")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 6)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "!=")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 7)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . ">")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 7)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . ">=")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 7)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "<=")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 7)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "<")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 9)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . "<<")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))
				     ((type . "PREC_LEFT")
				      (value . 9)
				      (content (type . "SEQ")
					       (members ((type . "FIELD")
							 (name . "left")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression)))))
							((type . "FIELD")
							 (name . "operator")
							 (content (type . "STRING")
								  (value . ">>")))
							((type . "FIELD")
							 (name . "right")
							 (content (type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . identifier))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_call_expression))
									    (named . t)
									    (value . call_expression))
									   ((type . "SYMBOL")
									    (name . number_literal))
									   ((type . "SYMBOL")
									    (name . char_literal))
									   ((type . "SYMBOL")
									    (name . preproc_defined))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_unary_expression))
									    (named . t)
									    (value . unary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_binary_expression))
									    (named . t)
									    (value . binary_expression))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . preproc_parenthesized_expression))
									    (named . t)
									    (value . parenthesized_expression))))))))))
 (function_definition (type . "SEQ")
		      (members ((type . "CHOICE")
				(members ((type . "SYMBOL")
					  (name . ms_call_modifier))
					 ((type . "BLANK"))))
			       ((type . "SEQ")
				(members ((type . "REPEAT")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . storage_class_specifier))
							    ((type . "SYMBOL")
							     (name . type_qualifier))
							    ((type . "SYMBOL")
							     (name . attribute_specifier))
							    ((type . "SYMBOL")
							     (name . ms_declspec_modifier)))))
					 ((type . "FIELD")
					  (name . "type")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . struct_specifier))
							    ((type . "SYMBOL")
							     (name . union_specifier))
							    ((type . "SYMBOL")
							     (name . enum_specifier))
							    ((type . "SYMBOL")
							     (name . macro_type_specifier))
							    ((type . "SYMBOL")
							     (name . sized_type_specifier))
							    ((type . "SYMBOL")
							     (name . primitive_type))
							    ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . identifier))
							     (named . t)
							     (value . type_identifier)))))
					 ((type . "REPEAT")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . storage_class_specifier))
							    ((type . "SYMBOL")
							     (name . type_qualifier))
							    ((type . "SYMBOL")
							     (name . attribute_specifier))
							    ((type . "SYMBOL")
							     (name . ms_declspec_modifier)))))))
			       ((type . "FIELD")
				(name . "declarator")
				(content (type . "CHOICE")
					 (members ((type . "SYMBOL")
						   (name . pointer_declarator))
						  ((type . "SYMBOL")
						   (name . function_declarator))
						  ((type . "SYMBOL")
						   (name . array_declarator))
						  ((type . "SYMBOL")
						   (name . parenthesized_declarator))
						  ((type . "SYMBOL")
						   (name . identifier)))))
			       ((type . "FIELD")
				(name . "body")
				(content (type . "SYMBOL")
					 (name . compound_statement)))))
 (declaration (type . "SEQ")
	      (members ((type . "SEQ")
			(members ((type . "REPEAT")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . storage_class_specifier))
						    ((type . "SYMBOL")
						     (name . type_qualifier))
						    ((type . "SYMBOL")
						     (name . attribute_specifier))
						    ((type . "SYMBOL")
						     (name . ms_declspec_modifier)))))
				 ((type . "FIELD")
				  (name . "type")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . struct_specifier))
						    ((type . "SYMBOL")
						     (name . union_specifier))
						    ((type . "SYMBOL")
						     (name . enum_specifier))
						    ((type . "SYMBOL")
						     (name . macro_type_specifier))
						    ((type . "SYMBOL")
						     (name . sized_type_specifier))
						    ((type . "SYMBOL")
						     (name . primitive_type))
						    ((type . "ALIAS")
						     (content (type . "SYMBOL")
							      (name . identifier))
						     (named . t)
						     (value . type_identifier)))))
				 ((type . "REPEAT")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . storage_class_specifier))
						    ((type . "SYMBOL")
						     (name . type_qualifier))
						    ((type . "SYMBOL")
						     (name . attribute_specifier))
						    ((type . "SYMBOL")
						     (name . ms_declspec_modifier)))))))
		       ((type . "SEQ")
			(members ((type . "FIELD")
				  (name . "declarator")
				  (content (type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . pointer_declarator))
							      ((type . "SYMBOL")
							       (name . function_declarator))
							      ((type . "SYMBOL")
							       (name . array_declarator))
							      ((type . "SYMBOL")
							       (name . parenthesized_declarator))
							      ((type . "SYMBOL")
							       (name . identifier))))
						    ((type . "SYMBOL")
						     (name . init_declarator)))))
				 ((type . "REPEAT")
				  (content (type . "SEQ")
					   (members ((type . "STRING")
						     (value . ","))
						    ((type . "FIELD")
						     (name . "declarator")
						     (content (type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . pointer_declarator))
										 ((type . "SYMBOL")
										  (name . function_declarator))
										 ((type . "SYMBOL")
										  (name . array_declarator))
										 ((type . "SYMBOL")
										  (name . parenthesized_declarator))
										 ((type . "SYMBOL")
										  (name . identifier))))
								       ((type . "SYMBOL")
									(name . init_declarator))))))))))
		       ((type . "STRING")
			(value . ";"))))
 (type_definition (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "typedef"))
			   ((type . "REPEAT")
			    (content (type . "SYMBOL")
				     (name . type_qualifier)))
			   ((type . "FIELD")
			    (name . "type")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . struct_specifier))
					      ((type . "SYMBOL")
					       (name . union_specifier))
					      ((type . "SYMBOL")
					       (name . enum_specifier))
					      ((type . "SYMBOL")
					       (name . macro_type_specifier))
					      ((type . "SYMBOL")
					       (name . sized_type_specifier))
					      ((type . "SYMBOL")
					       (name . primitive_type))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . type_identifier)))))
			   ((type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "declarator")
				      (content (type . "CHOICE")
					       (members ((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . pointer_type_declarator))
							 (named . t)
							 (value . pointer_declarator))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . function_type_declarator))
							 (named . t)
							 (value . function_declarator))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . array_type_declarator))
							 (named . t)
							 (value . array_declarator))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . parenthesized_type_declarator))
							 (named . t)
							 (value . parenthesized_declarator))
							((type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . identifier))
							 (named . t)
							 (value . type_identifier)))))
				     ((type . "REPEAT")
				      (content (type . "SEQ")
					       (members ((type . "STRING")
							 (value . ","))
							((type . "FIELD")
							 (name . "declarator")
							 (content (type . "CHOICE")
								  (members ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . pointer_type_declarator))
									    (named . t)
									    (value . pointer_declarator))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . function_type_declarator))
									    (named . t)
									    (value . function_declarator))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . array_type_declarator))
									    (named . t)
									    (value . array_declarator))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . parenthesized_type_declarator))
									    (named . t)
									    (value . parenthesized_declarator))
									   ((type . "ALIAS")
									    (content (type . "SYMBOL")
										     (name . identifier))
									    (named . t)
									    (value . type_identifier))))))))))
			   ((type . "STRING")
			    (value . ";"))))
 (_declaration_specifiers (type . "SEQ")
			  (members ((type . "REPEAT")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . storage_class_specifier))
						      ((type . "SYMBOL")
						       (name . type_qualifier))
						      ((type . "SYMBOL")
						       (name . attribute_specifier))
						      ((type . "SYMBOL")
						       (name . ms_declspec_modifier)))))
				   ((type . "FIELD")
				    (name . "type")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . struct_specifier))
						      ((type . "SYMBOL")
						       (name . union_specifier))
						      ((type . "SYMBOL")
						       (name . enum_specifier))
						      ((type . "SYMBOL")
						       (name . macro_type_specifier))
						      ((type . "SYMBOL")
						       (name . sized_type_specifier))
						      ((type . "SYMBOL")
						       (name . primitive_type))
						      ((type . "ALIAS")
						       (content (type . "SYMBOL")
								(name . identifier))
						       (named . t)
						       (value . type_identifier)))))
				   ((type . "REPEAT")
				    (content (type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . storage_class_specifier))
						      ((type . "SYMBOL")
						       (name . type_qualifier))
						      ((type . "SYMBOL")
						       (name . attribute_specifier))
						      ((type . "SYMBOL")
						       (name . ms_declspec_modifier)))))))
 (linkage_specification (type . "SEQ")
			(members ((type . "STRING")
				  (value . "extern"))
				 ((type . "FIELD")
				  (name . "value")
				  (content (type . "SYMBOL")
					   (name . string_literal)))
				 ((type . "FIELD")
				  (name . "body")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . function_definition))
						    ((type . "SYMBOL")
						     (name . declaration))
						    ((type . "SYMBOL")
						     (name . declaration_list)))))))
 (attribute_specifier (type . "SEQ")
		      (members ((type . "STRING")
				(value . "__attribute__"))
			       ((type . "STRING")
				(value . "("))
			       ((type . "SYMBOL")
				(name . argument_list))
			       ((type . "STRING")
				(value . ")"))))
 (ms_declspec_modifier (type . "SEQ")
		       (members ((type . "STRING")
				 (value . "__declspec"))
				((type . "STRING")
				 (value . "("))
				((type . "SYMBOL")
				 (name . identifier))
				((type . "STRING")
				 (value . ")"))))
 (ms_based_modifier (type . "SEQ")
		    (members ((type . "STRING")
			      (value . "__based"))
			     ((type . "SYMBOL")
			      (name . argument_list))))
 (ms_call_modifier (type . "CHOICE")
		   (members ((type . "STRING")
			     (value . "__cdecl"))
			    ((type . "STRING")
			     (value . "__clrcall"))
			    ((type . "STRING")
			     (value . "__stdcall"))
			    ((type . "STRING")
			     (value . "__fastcall"))
			    ((type . "STRING")
			     (value . "__thiscall"))
			    ((type . "STRING")
			     (value . "__vectorcall"))))
 (ms_restrict_modifier (type . "STRING") (value . "__restrict"))
 (ms_unsigned_ptr_modifier (type . "STRING") (value . "__uptr"))
 (ms_signed_ptr_modifier (type . "STRING") (value . "__sptr"))
 (ms_unaligned_ptr_modifier (type . "CHOICE")
			    (members ((type . "STRING")
				      (value . "_unaligned"))
				     ((type . "STRING")
				      (value . "__unaligned"))))
 (ms_pointer_modifier (type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . ms_unaligned_ptr_modifier))
			       ((type . "SYMBOL")
				(name . ms_restrict_modifier))
			       ((type . "SYMBOL")
				(name . ms_unsigned_ptr_modifier))
			       ((type . "SYMBOL")
				(name . ms_signed_ptr_modifier))))
 (declaration_list (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "{"))
			    ((type . "REPEAT")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . function_definition))
					       ((type . "SYMBOL")
						(name . linkage_specification))
					       ((type . "SYMBOL")
						(name . declaration))
					       ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . case_statement))
							 ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . labeled_statement))
								   ((type . "SYMBOL")
								    (name . compound_statement))
								   ((type . "SYMBOL")
								    (name . expression_statement))
								   ((type . "SYMBOL")
								    (name . if_statement))
								   ((type . "SYMBOL")
								    (name . switch_statement))
								   ((type . "SYMBOL")
								    (name . do_statement))
								   ((type . "SYMBOL")
								    (name . while_statement))
								   ((type . "SYMBOL")
								    (name . for_statement))
								   ((type . "SYMBOL")
								    (name . return_statement))
								   ((type . "SYMBOL")
								    (name . break_statement))
								   ((type . "SYMBOL")
								    (name . continue_statement))
								   ((type . "SYMBOL")
								    (name . goto_statement))))))
					       ((type . "SYMBOL")
						(name . type_definition))
					       ((type . "SEQ")
						(members ((type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . struct_specifier))
								   ((type . "SYMBOL")
								    (name . union_specifier))
								   ((type . "SYMBOL")
								    (name . enum_specifier))
								   ((type . "SYMBOL")
								    (name . macro_type_specifier))
								   ((type . "SYMBOL")
								    (name . sized_type_specifier))
								   ((type . "SYMBOL")
								    (name . primitive_type))
								   ((type . "ALIAS")
								    (content (type . "SYMBOL")
									     (name . identifier))
								    (named . t)
								    (value . type_identifier))))
							 ((type . "STRING")
							  (value . ";"))))
					       ((type . "SYMBOL")
						(name . preproc_if))
					       ((type . "SYMBOL")
						(name . preproc_ifdef))
					       ((type . "SYMBOL")
						(name . preproc_include))
					       ((type . "SYMBOL")
						(name . preproc_def))
					       ((type . "SYMBOL")
						(name . preproc_function_def))
					       ((type . "SYMBOL")
						(name . preproc_call)))))
			    ((type . "STRING")
			     (value . "}"))))
 (_declarator (type . "CHOICE")
	      (members ((type . "SYMBOL")
			(name . pointer_declarator))
		       ((type . "SYMBOL")
			(name . function_declarator))
		       ((type . "SYMBOL")
			(name . array_declarator))
		       ((type . "SYMBOL")
			(name . parenthesized_declarator))
		       ((type . "SYMBOL")
			(name . identifier))))
 (_field_declarator (type . "CHOICE")
		    (members ((type . "ALIAS")
			      (content (type . "SYMBOL")
				       (name . pointer_field_declarator))
			      (named . t)
			      (value . pointer_declarator))
			     ((type . "ALIAS")
			      (content (type . "SYMBOL")
				       (name . function_field_declarator))
			      (named . t)
			      (value . function_declarator))
			     ((type . "ALIAS")
			      (content (type . "SYMBOL")
				       (name . array_field_declarator))
			      (named . t)
			      (value . array_declarator))
			     ((type . "ALIAS")
			      (content (type . "SYMBOL")
				       (name . parenthesized_field_declarator))
			      (named . t)
			      (value . parenthesized_declarator))
			     ((type . "ALIAS")
			      (content (type . "SYMBOL") (name . identifier))
			      (named . t)
			      (value . field_identifier))))
 (_type_declarator (type . "CHOICE")
		   (members ((type . "ALIAS")
			     (content (type . "SYMBOL")
				      (name . pointer_type_declarator))
			     (named . t)
			     (value . pointer_declarator))
			    ((type . "ALIAS")
			     (content (type . "SYMBOL")
				      (name . function_type_declarator))
			     (named . t)
			     (value . function_declarator))
			    ((type . "ALIAS")
			     (content (type . "SYMBOL")
				      (name . array_type_declarator))
			     (named . t)
			     (value . array_declarator))
			    ((type . "ALIAS")
			     (content (type . "SYMBOL")
				      (name . parenthesized_type_declarator))
			     (named . t)
			     (value . parenthesized_declarator))
			    ((type . "ALIAS")
			     (content (type . "SYMBOL") (name . identifier))
			     (named . t)
			     (value . type_identifier))))
 (_abstract_declarator (type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . abstract_pointer_declarator))
				((type . "SYMBOL")
				 (name . abstract_function_declarator))
				((type . "SYMBOL")
				 (name . abstract_array_declarator))
				((type . "SYMBOL")
				 (name . abstract_parenthesized_declarator))))
 (parenthesized_declarator (type . "PREC_DYNAMIC")
			   (value . -10)
			   (content (type . "SEQ")
				    (members ((type . "STRING")
					      (value . "("))
					     ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . pointer_declarator))
						       ((type . "SYMBOL")
							(name . function_declarator))
						       ((type . "SYMBOL")
							(name . array_declarator))
						       ((type . "SYMBOL")
							(name . parenthesized_declarator))
						       ((type . "SYMBOL")
							(name . identifier))))
					     ((type . "STRING")
					      (value . ")")))))
 (parenthesized_field_declarator (type . "PREC_DYNAMIC")
				 (value . -10)
				 (content (type . "SEQ")
					  (members ((type . "STRING")
						    (value . "("))
						   ((type . "CHOICE")
						    (members ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . pointer_field_declarator))
							      (named . t)
							      (value . pointer_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . function_field_declarator))
							      (named . t)
							      (value . function_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . array_field_declarator))
							      (named . t)
							      (value . array_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . parenthesized_field_declarator))
							      (named . t)
							      (value . parenthesized_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . field_identifier))))
						   ((type . "STRING")
						    (value . ")")))))
 (parenthesized_type_declarator (type . "PREC_DYNAMIC")
				(value . -10)
				(content (type . "SEQ")
					 (members ((type . "STRING")
						   (value . "("))
						  ((type . "CHOICE")
						   (members ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . pointer_type_declarator))
							     (named . t)
							     (value . pointer_declarator))
							    ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . function_type_declarator))
							     (named . t)
							     (value . function_declarator))
							    ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . array_type_declarator))
							     (named . t)
							     (value . array_declarator))
							    ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . parenthesized_type_declarator))
							     (named . t)
							     (value . parenthesized_declarator))
							    ((type . "ALIAS")
							     (content (type . "SYMBOL")
								      (name . identifier))
							     (named . t)
							     (value . type_identifier))))
						  ((type . "STRING")
						   (value . ")")))))
 (abstract_parenthesized_declarator (type . "PREC")
				    (value . 1)
				    (content (type . "SEQ")
					     (members ((type . "STRING")
						       (value . "("))
						      ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . abstract_pointer_declarator))
								((type . "SYMBOL")
								 (name . abstract_function_declarator))
								((type . "SYMBOL")
								 (name . abstract_array_declarator))
								((type . "SYMBOL")
								 (name . abstract_parenthesized_declarator))))
						      ((type . "STRING")
						       (value . ")")))))
 (pointer_declarator (type . "PREC_DYNAMIC")
		     (value . 1)
		     (content (type . "PREC_RIGHT")
			      (value . 0)
			      (content (type . "SEQ")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . ms_based_modifier))
							  ((type . "BLANK"))))
						((type . "STRING")
						 (value . "*"))
						((type . "REPEAT")
						 (content (type . "SYMBOL")
							  (name . ms_pointer_modifier)))
						((type . "REPEAT")
						 (content (type . "SYMBOL")
							  (name . type_qualifier)))
						((type . "FIELD")
						 (name . "declarator")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . pointer_declarator))
								   ((type . "SYMBOL")
								    (name . function_declarator))
								   ((type . "SYMBOL")
								    (name . array_declarator))
								   ((type . "SYMBOL")
								    (name . parenthesized_declarator))
								   ((type . "SYMBOL")
								    (name . identifier)))))))))
 (pointer_field_declarator (type . "PREC_DYNAMIC")
			   (value . 1)
			   (content (type . "PREC_RIGHT")
				    (value . 0)
				    (content (type . "SEQ")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . ms_based_modifier))
								((type . "BLANK"))))
						      ((type . "STRING")
						       (value . "*"))
						      ((type . "REPEAT")
						       (content (type . "SYMBOL")
								(name . ms_pointer_modifier)))
						      ((type . "REPEAT")
						       (content (type . "SYMBOL")
								(name . type_qualifier)))
						      ((type . "FIELD")
						       (name . "declarator")
						       (content (type . "CHOICE")
								(members ((type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . pointer_field_declarator))
									  (named . t)
									  (value . pointer_declarator))
									 ((type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . function_field_declarator))
									  (named . t)
									  (value . function_declarator))
									 ((type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . array_field_declarator))
									  (named . t)
									  (value . array_declarator))
									 ((type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . parenthesized_field_declarator))
									  (named . t)
									  (value . parenthesized_declarator))
									 ((type . "ALIAS")
									  (content (type . "SYMBOL")
										   (name . identifier))
									  (named . t)
									  (value . field_identifier)))))))))
 (pointer_type_declarator (type . "PREC_DYNAMIC")
			  (value . 1)
			  (content (type . "PREC_RIGHT")
				   (value . 0)
				   (content (type . "SEQ")
					    (members ((type . "CHOICE")
						      (members ((type . "SYMBOL")
								(name . ms_based_modifier))
							       ((type . "BLANK"))))
						     ((type . "STRING")
						      (value . "*"))
						     ((type . "REPEAT")
						      (content (type . "SYMBOL")
							       (name . ms_pointer_modifier)))
						     ((type . "REPEAT")
						      (content (type . "SYMBOL")
							       (name . type_qualifier)))
						     ((type . "FIELD")
						      (name . "declarator")
						      (content (type . "CHOICE")
							       (members ((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . pointer_type_declarator))
									 (named . t)
									 (value . pointer_declarator))
									((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . function_type_declarator))
									 (named . t)
									 (value . function_declarator))
									((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . array_type_declarator))
									 (named . t)
									 (value . array_declarator))
									((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . parenthesized_type_declarator))
									 (named . t)
									 (value . parenthesized_declarator))
									((type . "ALIAS")
									 (content (type . "SYMBOL")
										  (name . identifier))
									 (named . t)
									 (value . type_identifier)))))))))
 (abstract_pointer_declarator (type . "PREC_DYNAMIC")
			      (value . 1)
			      (content (type . "PREC_RIGHT")
				       (value . 0)
				       (content (type . "SEQ")
						(members ((type . "STRING")
							  (value . "*"))
							 ((type . "REPEAT")
							  (content (type . "SYMBOL")
								   (name . type_qualifier)))
							 ((type . "FIELD")
							  (name . "declarator")
							  (content (type . "CHOICE")
								   (members ((type . "CHOICE")
									     (members ((type . "SYMBOL")
										       (name . abstract_pointer_declarator))
										      ((type . "SYMBOL")
										       (name . abstract_function_declarator))
										      ((type . "SYMBOL")
										       (name . abstract_array_declarator))
										      ((type . "SYMBOL")
										       (name . abstract_parenthesized_declarator))))
									    ((type . "BLANK")))))))))
 (function_declarator (type . "PREC")
		      (value . 1)
		      (content (type . "SEQ")
			       (members ((type . "FIELD")
					 (name . "declarator")
					 (content (type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . pointer_declarator))
							   ((type . "SYMBOL")
							    (name . function_declarator))
							   ((type . "SYMBOL")
							    (name . array_declarator))
							   ((type . "SYMBOL")
							    (name . parenthesized_declarator))
							   ((type . "SYMBOL")
							    (name . identifier)))))
					((type . "FIELD")
					 (name . "parameters")
					 (content (type . "SYMBOL")
						  (name . parameter_list)))
					((type . "REPEAT")
					 (content (type . "SYMBOL")
						  (name . attribute_specifier))))))
 (function_field_declarator (type . "PREC")
			    (value . 1)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "declarator")
					       (content (type . "CHOICE")
							(members ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . pointer_field_declarator))
								  (named . t)
								  (value . pointer_declarator))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . function_field_declarator))
								  (named . t)
								  (value . function_declarator))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . array_field_declarator))
								  (named . t)
								  (value . array_declarator))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . parenthesized_field_declarator))
								  (named . t)
								  (value . parenthesized_declarator))
								 ((type . "ALIAS")
								  (content (type . "SYMBOL")
									   (name . identifier))
								  (named . t)
								  (value . field_identifier)))))
					      ((type . "FIELD")
					       (name . "parameters")
					       (content (type . "SYMBOL")
							(name . parameter_list))))))
 (function_type_declarator (type . "PREC")
			   (value . 1)
			   (content (type . "SEQ")
				    (members ((type . "FIELD")
					      (name . "declarator")
					      (content (type . "CHOICE")
						       (members ((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . pointer_type_declarator))
								 (named . t)
								 (value . pointer_declarator))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . function_type_declarator))
								 (named . t)
								 (value . function_declarator))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . array_type_declarator))
								 (named . t)
								 (value . array_declarator))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . parenthesized_type_declarator))
								 (named . t)
								 (value . parenthesized_declarator))
								((type . "ALIAS")
								 (content (type . "SYMBOL")
									  (name . identifier))
								 (named . t)
								 (value . type_identifier)))))
					     ((type . "FIELD")
					      (name . "parameters")
					      (content (type . "SYMBOL")
						       (name . parameter_list))))))
 (abstract_function_declarator (type . "PREC")
			       (value . 1)
			       (content (type . "SEQ")
					(members ((type . "FIELD")
						  (name . "declarator")
						  (content (type . "CHOICE")
							   (members ((type . "CHOICE")
								     (members ((type . "SYMBOL")
									       (name . abstract_pointer_declarator))
									      ((type . "SYMBOL")
									       (name . abstract_function_declarator))
									      ((type . "SYMBOL")
									       (name . abstract_array_declarator))
									      ((type . "SYMBOL")
									       (name . abstract_parenthesized_declarator))))
								    ((type . "BLANK")))))
						 ((type . "FIELD")
						  (name . "parameters")
						  (content (type . "SYMBOL")
							   (name . parameter_list))))))
 (array_declarator (type . "PREC")
		   (value . 1)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "declarator")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . pointer_declarator))
							((type . "SYMBOL")
							 (name . function_declarator))
							((type . "SYMBOL")
							 (name . array_declarator))
							((type . "SYMBOL")
							 (name . parenthesized_declarator))
							((type . "SYMBOL")
							 (name . identifier)))))
				     ((type . "STRING")
				      (value . "["))
				     ((type . "REPEAT")
				      (content (type . "SYMBOL")
					       (name . type_qualifier)))
				     ((type . "FIELD")
				      (name . "size")
				      (content (type . "CHOICE")
					       (members ((type . "CHOICE")
							 (members ((type . "CHOICE")
								   (members ((type . "SYMBOL")
									     (name . conditional_expression))
									    ((type . "SYMBOL")
									     (name . assignment_expression))
									    ((type . "SYMBOL")
									     (name . binary_expression))
									    ((type . "SYMBOL")
									     (name . unary_expression))
									    ((type . "SYMBOL")
									     (name . update_expression))
									    ((type . "SYMBOL")
									     (name . cast_expression))
									    ((type . "SYMBOL")
									     (name . pointer_expression))
									    ((type . "SYMBOL")
									     (name . sizeof_expression))
									    ((type . "SYMBOL")
									     (name . subscript_expression))
									    ((type . "SYMBOL")
									     (name . call_expression))
									    ((type . "SYMBOL")
									     (name . field_expression))
									    ((type . "SYMBOL")
									     (name . compound_literal_expression))
									    ((type . "SYMBOL")
									     (name . identifier))
									    ((type . "SYMBOL")
									     (name . number_literal))
									    ((type . "SYMBOL")
									     (name . string_literal))
									    ((type . "SYMBOL")
									     (name . true))
									    ((type . "SYMBOL")
									     (name . false))
									    ((type . "SYMBOL")
									     (name . null))
									    ((type . "SYMBOL")
									     (name . concatenated_string))
									    ((type . "SYMBOL")
									     (name . char_literal))
									    ((type . "SYMBOL")
									     (name . parenthesized_expression))))
								  ((type . "STRING")
								   (value . "*"))))
							((type . "BLANK")))))
				     ((type . "STRING")
				      (value . "]")))))
 (array_field_declarator (type . "PREC")
			 (value . 1)
			 (content (type . "SEQ")
				  (members ((type . "FIELD")
					    (name . "declarator")
					    (content (type . "CHOICE")
						     (members ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . pointer_field_declarator))
							       (named . t)
							       (value . pointer_declarator))
							      ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . function_field_declarator))
							       (named . t)
							       (value . function_declarator))
							      ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . array_field_declarator))
							       (named . t)
							       (value . array_declarator))
							      ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . parenthesized_field_declarator))
							       (named . t)
							       (value . parenthesized_declarator))
							      ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . identifier))
							       (named . t)
							       (value . field_identifier)))))
					   ((type . "STRING")
					    (value . "["))
					   ((type . "REPEAT")
					    (content (type . "SYMBOL")
						     (name . type_qualifier)))
					   ((type . "FIELD")
					    (name . "size")
					    (content (type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . conditional_expression))
										  ((type . "SYMBOL")
										   (name . assignment_expression))
										  ((type . "SYMBOL")
										   (name . binary_expression))
										  ((type . "SYMBOL")
										   (name . unary_expression))
										  ((type . "SYMBOL")
										   (name . update_expression))
										  ((type . "SYMBOL")
										   (name . cast_expression))
										  ((type . "SYMBOL")
										   (name . pointer_expression))
										  ((type . "SYMBOL")
										   (name . sizeof_expression))
										  ((type . "SYMBOL")
										   (name . subscript_expression))
										  ((type . "SYMBOL")
										   (name . call_expression))
										  ((type . "SYMBOL")
										   (name . field_expression))
										  ((type . "SYMBOL")
										   (name . compound_literal_expression))
										  ((type . "SYMBOL")
										   (name . identifier))
										  ((type . "SYMBOL")
										   (name . number_literal))
										  ((type . "SYMBOL")
										   (name . string_literal))
										  ((type . "SYMBOL")
										   (name . true))
										  ((type . "SYMBOL")
										   (name . false))
										  ((type . "SYMBOL")
										   (name . null))
										  ((type . "SYMBOL")
										   (name . concatenated_string))
										  ((type . "SYMBOL")
										   (name . char_literal))
										  ((type . "SYMBOL")
										   (name . parenthesized_expression))))
									((type . "STRING")
									 (value . "*"))))
							      ((type . "BLANK")))))
					   ((type . "STRING")
					    (value . "]")))))
 (array_type_declarator (type . "PREC")
			(value . 1)
			(content (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "declarator")
					   (content (type . "CHOICE")
						    (members ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . pointer_type_declarator))
							      (named . t)
							      (value . pointer_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . function_type_declarator))
							      (named . t)
							      (value . function_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . array_type_declarator))
							      (named . t)
							      (value . array_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . parenthesized_type_declarator))
							      (named . t)
							      (value . parenthesized_declarator))
							     ((type . "ALIAS")
							      (content (type . "SYMBOL")
								       (name . identifier))
							      (named . t)
							      (value . type_identifier)))))
					  ((type . "STRING")
					   (value . "["))
					  ((type . "REPEAT")
					   (content (type . "SYMBOL")
						    (name . type_qualifier)))
					  ((type . "FIELD")
					   (name . "size")
					   (content (type . "CHOICE")
						    (members ((type . "CHOICE")
							      (members ((type . "CHOICE")
									(members ((type . "SYMBOL")
										  (name . conditional_expression))
										 ((type . "SYMBOL")
										  (name . assignment_expression))
										 ((type . "SYMBOL")
										  (name . binary_expression))
										 ((type . "SYMBOL")
										  (name . unary_expression))
										 ((type . "SYMBOL")
										  (name . update_expression))
										 ((type . "SYMBOL")
										  (name . cast_expression))
										 ((type . "SYMBOL")
										  (name . pointer_expression))
										 ((type . "SYMBOL")
										  (name . sizeof_expression))
										 ((type . "SYMBOL")
										  (name . subscript_expression))
										 ((type . "SYMBOL")
										  (name . call_expression))
										 ((type . "SYMBOL")
										  (name . field_expression))
										 ((type . "SYMBOL")
										  (name . compound_literal_expression))
										 ((type . "SYMBOL")
										  (name . identifier))
										 ((type . "SYMBOL")
										  (name . number_literal))
										 ((type . "SYMBOL")
										  (name . string_literal))
										 ((type . "SYMBOL")
										  (name . true))
										 ((type . "SYMBOL")
										  (name . false))
										 ((type . "SYMBOL")
										  (name . null))
										 ((type . "SYMBOL")
										  (name . concatenated_string))
										 ((type . "SYMBOL")
										  (name . char_literal))
										 ((type . "SYMBOL")
										  (name . parenthesized_expression))))
								       ((type . "STRING")
									(value . "*"))))
							     ((type . "BLANK")))))
					  ((type . "STRING")
					   (value . "]")))))
 (abstract_array_declarator (type . "PREC")
			    (value . 1)
			    (content (type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "declarator")
					       (content (type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . abstract_pointer_declarator))
									   ((type . "SYMBOL")
									    (name . abstract_function_declarator))
									   ((type . "SYMBOL")
									    (name . abstract_array_declarator))
									   ((type . "SYMBOL")
									    (name . abstract_parenthesized_declarator))))
								 ((type . "BLANK")))))
					      ((type . "STRING")
					       (value . "["))
					      ((type . "REPEAT")
					       (content (type . "SYMBOL")
							(name . type_qualifier)))
					      ((type . "FIELD")
					       (name . "size")
					       (content (type . "CHOICE")
							(members ((type . "CHOICE")
								  (members ((type . "CHOICE")
									    (members ((type . "SYMBOL")
										      (name . conditional_expression))
										     ((type . "SYMBOL")
										      (name . assignment_expression))
										     ((type . "SYMBOL")
										      (name . binary_expression))
										     ((type . "SYMBOL")
										      (name . unary_expression))
										     ((type . "SYMBOL")
										      (name . update_expression))
										     ((type . "SYMBOL")
										      (name . cast_expression))
										     ((type . "SYMBOL")
										      (name . pointer_expression))
										     ((type . "SYMBOL")
										      (name . sizeof_expression))
										     ((type . "SYMBOL")
										      (name . subscript_expression))
										     ((type . "SYMBOL")
										      (name . call_expression))
										     ((type . "SYMBOL")
										      (name . field_expression))
										     ((type . "SYMBOL")
										      (name . compound_literal_expression))
										     ((type . "SYMBOL")
										      (name . identifier))
										     ((type . "SYMBOL")
										      (name . number_literal))
										     ((type . "SYMBOL")
										      (name . string_literal))
										     ((type . "SYMBOL")
										      (name . true))
										     ((type . "SYMBOL")
										      (name . false))
										     ((type . "SYMBOL")
										      (name . null))
										     ((type . "SYMBOL")
										      (name . concatenated_string))
										     ((type . "SYMBOL")
										      (name . char_literal))
										     ((type . "SYMBOL")
										      (name . parenthesized_expression))))
									   ((type . "STRING")
									    (value . "*"))))
								 ((type . "BLANK")))))
					      ((type . "STRING")
					       (value . "]")))))
 (init_declarator (type . "SEQ")
		  (members ((type . "FIELD")
			    (name . "declarator")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . pointer_declarator))
					      ((type . "SYMBOL")
					       (name . function_declarator))
					      ((type . "SYMBOL")
					       (name . array_declarator))
					      ((type . "SYMBOL")
					       (name . parenthesized_declarator))
					      ((type . "SYMBOL")
					       (name . identifier)))))
			   ((type . "STRING")
			    (value . "="))
			   ((type . "FIELD")
			    (name . "value")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . initializer_list))
					      ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . conditional_expression))
							((type . "SYMBOL")
							 (name . assignment_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . update_expression))
							((type . "SYMBOL")
							 (name . cast_expression))
							((type . "SYMBOL")
							 (name . pointer_expression))
							((type . "SYMBOL")
							 (name . sizeof_expression))
							((type . "SYMBOL")
							 (name . subscript_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . field_expression))
							((type . "SYMBOL")
							 (name . compound_literal_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "SYMBOL")
							 (name . number_literal))
							((type . "SYMBOL")
							 (name . string_literal))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . null))
							((type . "SYMBOL")
							 (name . concatenated_string))
							((type . "SYMBOL")
							 (name . char_literal))
							((type . "SYMBOL")
							 (name . parenthesized_expression)))))))))
 (compound_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "{"))
			      ((type . "REPEAT")
			       (content (type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . function_definition))
						 ((type . "SYMBOL")
						  (name . linkage_specification))
						 ((type . "SYMBOL")
						  (name . declaration))
						 ((type . "CHOICE")
						  (members ((type . "SYMBOL")
							    (name . case_statement))
							   ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . labeled_statement))
								     ((type . "SYMBOL")
								      (name . compound_statement))
								     ((type . "SYMBOL")
								      (name . expression_statement))
								     ((type . "SYMBOL")
								      (name . if_statement))
								     ((type . "SYMBOL")
								      (name . switch_statement))
								     ((type . "SYMBOL")
								      (name . do_statement))
								     ((type . "SYMBOL")
								      (name . while_statement))
								     ((type . "SYMBOL")
								      (name . for_statement))
								     ((type . "SYMBOL")
								      (name . return_statement))
								     ((type . "SYMBOL")
								      (name . break_statement))
								     ((type . "SYMBOL")
								      (name . continue_statement))
								     ((type . "SYMBOL")
								      (name . goto_statement))))))
						 ((type . "SYMBOL")
						  (name . type_definition))
						 ((type . "SEQ")
						  (members ((type . "CHOICE")
							    (members ((type . "SYMBOL")
								      (name . struct_specifier))
								     ((type . "SYMBOL")
								      (name . union_specifier))
								     ((type . "SYMBOL")
								      (name . enum_specifier))
								     ((type . "SYMBOL")
								      (name . macro_type_specifier))
								     ((type . "SYMBOL")
								      (name . sized_type_specifier))
								     ((type . "SYMBOL")
								      (name . primitive_type))
								     ((type . "ALIAS")
								      (content (type . "SYMBOL")
									       (name . identifier))
								      (named . t)
								      (value . type_identifier))))
							   ((type . "STRING")
							    (value . ";"))))
						 ((type . "SYMBOL")
						  (name . preproc_if))
						 ((type . "SYMBOL")
						  (name . preproc_ifdef))
						 ((type . "SYMBOL")
						  (name . preproc_include))
						 ((type . "SYMBOL")
						  (name . preproc_def))
						 ((type . "SYMBOL")
						  (name . preproc_function_def))
						 ((type . "SYMBOL")
						  (name . preproc_call)))))
			      ((type . "STRING")
			       (value . "}"))))
 (storage_class_specifier (type . "CHOICE")
			  (members ((type . "STRING")
				    (value . "extern"))
				   ((type . "STRING")
				    (value . "static"))
				   ((type . "STRING")
				    (value . "auto"))
				   ((type . "STRING")
				    (value . "register"))
				   ((type . "STRING")
				    (value . "inline"))))
 (type_qualifier (type . "CHOICE")
		 (members ((type . "STRING")
			   (value . "const"))
			  ((type . "STRING")
			   (value . "volatile"))
			  ((type . "STRING")
			   (value . "restrict"))
			  ((type . "STRING")
			   (value . "_Atomic"))))
 (_type_specifier (type . "CHOICE")
		  (members ((type . "SYMBOL")
			    (name . struct_specifier))
			   ((type . "SYMBOL")
			    (name . union_specifier))
			   ((type . "SYMBOL")
			    (name . enum_specifier))
			   ((type . "SYMBOL")
			    (name . macro_type_specifier))
			   ((type . "SYMBOL")
			    (name . sized_type_specifier))
			   ((type . "SYMBOL")
			    (name . primitive_type))
			   ((type . "ALIAS")
			    (content (type . "SYMBOL") (name . identifier))
			    (named . t)
			    (value . type_identifier))))
 (sized_type_specifier (type . "SEQ")
		       (members ((type . "REPEAT1")
				 (content (type . "CHOICE")
					  (members ((type . "STRING")
						    (value . "signed"))
						   ((type . "STRING")
						    (value . "unsigned"))
						   ((type . "STRING")
						    (value . "long"))
						   ((type . "STRING")
						    (value . "short")))))
				((type . "FIELD")
				 (name . "type")
				 (content (type . "CHOICE")
					  (members ((type . "CHOICE")
						    (members ((type . "PREC_DYNAMIC")
							      (value . -1)
							      (content (type . "ALIAS")
								       (content (type . "SYMBOL")
										(name . identifier))
								       (named . t)
								       (value . type_identifier)))
							     ((type . "SYMBOL")
							      (name . primitive_type))))
						   ((type . "BLANK")))))))
 (primitive_type (type . "TOKEN")
		 (content (type . "CHOICE")
			  (members ((type . "STRING")
				    (value . "bool"))
				   ((type . "STRING")
				    (value . "char"))
				   ((type . "STRING")
				    (value . "int"))
				   ((type . "STRING")
				    (value . "float"))
				   ((type . "STRING")
				    (value . "double"))
				   ((type . "STRING")
				    (value . "void"))
				   ((type . "STRING")
				    (value . "size_t"))
				   ((type . "STRING")
				    (value . "ssize_t"))
				   ((type . "STRING")
				    (value . "intptr_t"))
				   ((type . "STRING")
				    (value . "uintptr_t"))
				   ((type . "STRING")
				    (value . "charptr_t"))
				   ((type . "STRING")
				    (value . "int8_t"))
				   ((type . "STRING")
				    (value . "int16_t"))
				   ((type . "STRING")
				    (value . "int32_t"))
				   ((type . "STRING")
				    (value . "int64_t"))
				   ((type . "STRING")
				    (value . "uint8_t"))
				   ((type . "STRING")
				    (value . "uint16_t"))
				   ((type . "STRING")
				    (value . "uint32_t"))
				   ((type . "STRING")
				    (value . "uint64_t"))
				   ((type . "STRING")
				    (value . "char8_t"))
				   ((type . "STRING")
				    (value . "char16_t"))
				   ((type . "STRING")
				    (value . "char32_t"))
				   ((type . "STRING")
				    (value . "char64_t")))))
 (enum_specifier (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "enum"))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "FIELD")
					       (name . "name")
					       (content (type . "ALIAS")
							(content (type . "SYMBOL")
								 (name . identifier))
							(named . t)
							(value . type_identifier)))
					      ((type . "FIELD")
					       (name . "body")
					       (content (type . "CHOICE")
							(members ((type . "SYMBOL")
								  (name . enumerator_list))
								 ((type . "BLANK")))))))
				    ((type . "FIELD")
				     (name . "body")
				     (content (type . "SYMBOL")
					      (name . enumerator_list)))))))
 (enumerator_list (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "{"))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "SYMBOL")
						(name . enumerator))
					       ((type . "REPEAT")
						(content (type . "SEQ")
							 (members ((type . "STRING")
								   (value . ","))
								  ((type . "SYMBOL")
								   (name . enumerator)))))))
				     ((type . "BLANK"))))
			   ((type . "CHOICE")
			    (members ((type . "STRING")
				      (value . ","))
				     ((type . "BLANK"))))
			   ((type . "STRING")
			    (value . "}"))))
 (struct_specifier (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "struct"))
			    ((type . "CHOICE")
			     (members ((type . "SYMBOL")
				       (name . ms_declspec_modifier))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "name")
						 (content (type . "ALIAS")
							  (content (type . "SYMBOL")
								   (name . identifier))
							  (named . t)
							  (value . type_identifier)))
						((type . "FIELD")
						 (name . "body")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . field_declaration_list))
								   ((type . "BLANK")))))))
				      ((type . "FIELD")
				       (name . "body")
				       (content (type . "SYMBOL")
						(name . field_declaration_list)))))))
 (union_specifier (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "union"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . ms_declspec_modifier))
				     ((type . "BLANK"))))
			   ((type . "CHOICE")
			    (members ((type . "SEQ")
				      (members ((type . "FIELD")
						(name . "name")
						(content (type . "ALIAS")
							 (content (type . "SYMBOL")
								  (name . identifier))
							 (named . t)
							 (value . type_identifier)))
					       ((type . "FIELD")
						(name . "body")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . field_declaration_list))
								  ((type . "BLANK")))))))
				     ((type . "FIELD")
				      (name . "body")
				      (content (type . "SYMBOL")
					       (name . field_declaration_list)))))))
 (field_declaration_list (type . "SEQ")
			 (members ((type . "STRING")
				   (value . "{"))
				  ((type . "REPEAT")
				   (content (type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . field_declaration))
						     ((type . "SYMBOL")
						      (name . preproc_def))
						     ((type . "SYMBOL")
						      (name . preproc_function_def))
						     ((type . "SYMBOL")
						      (name . preproc_call))
						     ((type . "ALIAS")
						      (content (type . "SYMBOL")
							       (name . preproc_if_in_field_declaration_list))
						      (named . t)
						      (value . preproc_if))
						     ((type . "ALIAS")
						      (content (type . "SYMBOL")
							       (name . preproc_ifdef_in_field_declaration_list))
						      (named . t)
						      (value . preproc_ifdef)))))
				  ((type . "STRING")
				   (value . "}"))))
 (_field_declaration_list_item (type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . field_declaration))
					((type . "SYMBOL")
					 (name . preproc_def))
					((type . "SYMBOL")
					 (name . preproc_function_def))
					((type . "SYMBOL")
					 (name . preproc_call))
					((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . preproc_if_in_field_declaration_list))
					 (named . t)
					 (value . preproc_if))
					((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . preproc_ifdef_in_field_declaration_list))
					 (named . t)
					 (value . preproc_ifdef))))
 (field_declaration (type . "SEQ")
		    (members ((type . "SEQ")
			      (members ((type . "REPEAT")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . storage_class_specifier))
							  ((type . "SYMBOL")
							   (name . type_qualifier))
							  ((type . "SYMBOL")
							   (name . attribute_specifier))
							  ((type . "SYMBOL")
							   (name . ms_declspec_modifier)))))
				       ((type . "FIELD")
					(name . "type")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . struct_specifier))
							  ((type . "SYMBOL")
							   (name . union_specifier))
							  ((type . "SYMBOL")
							   (name . enum_specifier))
							  ((type . "SYMBOL")
							   (name . macro_type_specifier))
							  ((type . "SYMBOL")
							   (name . sized_type_specifier))
							  ((type . "SYMBOL")
							   (name . primitive_type))
							  ((type . "ALIAS")
							   (content (type . "SYMBOL")
								    (name . identifier))
							   (named . t)
							   (value . type_identifier)))))
				       ((type . "REPEAT")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . storage_class_specifier))
							  ((type . "SYMBOL")
							   (name . type_qualifier))
							  ((type . "SYMBOL")
							   (name . attribute_specifier))
							  ((type . "SYMBOL")
							   (name . ms_declspec_modifier)))))))
			     ((type . "CHOICE")
			      (members ((type . "SEQ")
					(members ((type . "FIELD")
						  (name . "declarator")
						  (content (type . "CHOICE")
							   (members ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . pointer_field_declarator))
								     (named . t)
								     (value . pointer_declarator))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . function_field_declarator))
								     (named . t)
								     (value . function_declarator))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . array_field_declarator))
								     (named . t)
								     (value . array_declarator))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . parenthesized_field_declarator))
								     (named . t)
								     (value . parenthesized_declarator))
								    ((type . "ALIAS")
								     (content (type . "SYMBOL")
									      (name . identifier))
								     (named . t)
								     (value . field_identifier)))))
						 ((type . "REPEAT")
						  (content (type . "SEQ")
							   (members ((type . "STRING")
								     (value . ","))
								    ((type . "FIELD")
								     (name . "declarator")
								     (content (type . "CHOICE")
									      (members ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . pointer_field_declarator))
											(named . t)
											(value . pointer_declarator))
										       ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . function_field_declarator))
											(named . t)
											(value . function_declarator))
										       ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . array_field_declarator))
											(named . t)
											(value . array_declarator))
										       ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . parenthesized_field_declarator))
											(named . t)
											(value . parenthesized_declarator))
										       ((type . "ALIAS")
											(content (type . "SYMBOL")
												 (name . identifier))
											(named . t)
											(value . field_identifier))))))))))
				       ((type . "BLANK"))))
			     ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . bitfield_clause))
				       ((type . "BLANK"))))
			     ((type . "STRING")
			      (value . ";"))))
 (bitfield_clause (type . "SEQ")
		  (members ((type . "STRING")
			    (value . ":"))
			   ((type . "CHOICE")
			    (members ((type . "SYMBOL")
				      (name . conditional_expression))
				     ((type . "SYMBOL")
				      (name . assignment_expression))
				     ((type . "SYMBOL")
				      (name . binary_expression))
				     ((type . "SYMBOL")
				      (name . unary_expression))
				     ((type . "SYMBOL")
				      (name . update_expression))
				     ((type . "SYMBOL")
				      (name . cast_expression))
				     ((type . "SYMBOL")
				      (name . pointer_expression))
				     ((type . "SYMBOL")
				      (name . sizeof_expression))
				     ((type . "SYMBOL")
				      (name . subscript_expression))
				     ((type . "SYMBOL")
				      (name . call_expression))
				     ((type . "SYMBOL")
				      (name . field_expression))
				     ((type . "SYMBOL")
				      (name . compound_literal_expression))
				     ((type . "SYMBOL")
				      (name . identifier))
				     ((type . "SYMBOL")
				      (name . number_literal))
				     ((type . "SYMBOL")
				      (name . string_literal))
				     ((type . "SYMBOL")
				      (name . true))
				     ((type . "SYMBOL")
				      (name . false))
				     ((type . "SYMBOL")
				      (name . null))
				     ((type . "SYMBOL")
				      (name . concatenated_string))
				     ((type . "SYMBOL")
				      (name . char_literal))
				     ((type . "SYMBOL")
				      (name . parenthesized_expression))))))
 (enumerator (type . "SEQ")
	     (members ((type . "FIELD")
		       (name . "name")
		       (content (type . "SYMBOL") (name . identifier)))
		      ((type . "CHOICE")
		       (members ((type . "SEQ")
				 (members ((type . "STRING")
					   (value . "="))
					  ((type . "FIELD")
					   (name . "value")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . conditional_expression))
							     ((type . "SYMBOL")
							      (name . assignment_expression))
							     ((type . "SYMBOL")
							      (name . binary_expression))
							     ((type . "SYMBOL")
							      (name . unary_expression))
							     ((type . "SYMBOL")
							      (name . update_expression))
							     ((type . "SYMBOL")
							      (name . cast_expression))
							     ((type . "SYMBOL")
							      (name . pointer_expression))
							     ((type . "SYMBOL")
							      (name . sizeof_expression))
							     ((type . "SYMBOL")
							      (name . subscript_expression))
							     ((type . "SYMBOL")
							      (name . call_expression))
							     ((type . "SYMBOL")
							      (name . field_expression))
							     ((type . "SYMBOL")
							      (name . compound_literal_expression))
							     ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "SYMBOL")
							      (name . number_literal))
							     ((type . "SYMBOL")
							      (name . string_literal))
							     ((type . "SYMBOL")
							      (name . true))
							     ((type . "SYMBOL")
							      (name . false))
							     ((type . "SYMBOL")
							      (name . null))
							     ((type . "SYMBOL")
							      (name . concatenated_string))
							     ((type . "SYMBOL")
							      (name . char_literal))
							     ((type . "SYMBOL")
							      (name . parenthesized_expression)))))))
				((type . "BLANK"))))))
 (parameter_list (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "("))
			  ((type . "CHOICE")
			   (members ((type . "SEQ")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . parameter_declaration))
							((type . "STRING")
							 (value . "..."))))
					      ((type . "REPEAT")
					       (content (type . "SEQ")
							(members ((type . "STRING")
								  (value . ","))
								 ((type . "CHOICE")
								  (members ((type . "SYMBOL")
									    (name . parameter_declaration))
									   ((type . "STRING")
									    (value . "...")))))))))
				    ((type . "BLANK"))))
			  ((type . "STRING")
			   (value . ")"))))
 (parameter_declaration (type . "SEQ")
			(members ((type . "SEQ")
				  (members ((type . "REPEAT")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . storage_class_specifier))
							      ((type . "SYMBOL")
							       (name . type_qualifier))
							      ((type . "SYMBOL")
							       (name . attribute_specifier))
							      ((type . "SYMBOL")
							       (name . ms_declspec_modifier)))))
					   ((type . "FIELD")
					    (name . "type")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . struct_specifier))
							      ((type . "SYMBOL")
							       (name . union_specifier))
							      ((type . "SYMBOL")
							       (name . enum_specifier))
							      ((type . "SYMBOL")
							       (name . macro_type_specifier))
							      ((type . "SYMBOL")
							       (name . sized_type_specifier))
							      ((type . "SYMBOL")
							       (name . primitive_type))
							      ((type . "ALIAS")
							       (content (type . "SYMBOL")
									(name . identifier))
							       (named . t)
							       (value . type_identifier)))))
					   ((type . "REPEAT")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . storage_class_specifier))
							      ((type . "SYMBOL")
							       (name . type_qualifier))
							      ((type . "SYMBOL")
							       (name . attribute_specifier))
							      ((type . "SYMBOL")
							       (name . ms_declspec_modifier)))))))
				 ((type . "CHOICE")
				  (members ((type . "FIELD")
					    (name . "declarator")
					    (content (type . "CHOICE")
						     (members ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . pointer_declarator))
									((type . "SYMBOL")
									 (name . function_declarator))
									((type . "SYMBOL")
									 (name . array_declarator))
									((type . "SYMBOL")
									 (name . parenthesized_declarator))
									((type . "SYMBOL")
									 (name . identifier))))
							      ((type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . abstract_pointer_declarator))
									((type . "SYMBOL")
									 (name . abstract_function_declarator))
									((type . "SYMBOL")
									 (name . abstract_array_declarator))
									((type . "SYMBOL")
									 (name . abstract_parenthesized_declarator)))))))
					   ((type . "BLANK"))))))
 (_statement (type . "CHOICE")
	     (members ((type . "SYMBOL")
		       (name . case_statement))
		      ((type . "CHOICE")
		       (members ((type . "SYMBOL")
				 (name . labeled_statement))
				((type . "SYMBOL")
				 (name . compound_statement))
				((type . "SYMBOL")
				 (name . expression_statement))
				((type . "SYMBOL")
				 (name . if_statement))
				((type . "SYMBOL")
				 (name . switch_statement))
				((type . "SYMBOL")
				 (name . do_statement))
				((type . "SYMBOL")
				 (name . while_statement))
				((type . "SYMBOL")
				 (name . for_statement))
				((type . "SYMBOL")
				 (name . return_statement))
				((type . "SYMBOL")
				 (name . break_statement))
				((type . "SYMBOL")
				 (name . continue_statement))
				((type . "SYMBOL")
				 (name . goto_statement))))))
 (_non_case_statement (type . "CHOICE")
		      (members ((type . "SYMBOL")
				(name . labeled_statement))
			       ((type . "SYMBOL")
				(name . compound_statement))
			       ((type . "SYMBOL")
				(name . expression_statement))
			       ((type . "SYMBOL")
				(name . if_statement))
			       ((type . "SYMBOL")
				(name . switch_statement))
			       ((type . "SYMBOL")
				(name . do_statement))
			       ((type . "SYMBOL")
				(name . while_statement))
			       ((type . "SYMBOL")
				(name . for_statement))
			       ((type . "SYMBOL")
				(name . return_statement))
			       ((type . "SYMBOL")
				(name . break_statement))
			       ((type . "SYMBOL")
				(name . continue_statement))
			       ((type . "SYMBOL")
				(name . goto_statement))))
 (labeled_statement (type . "SEQ")
		    (members ((type . "FIELD")
			      (name . "label")
			      (content (type . "ALIAS")
				       (content (type . "SYMBOL")
						(name . identifier))
				       (named . t)
				       (value . statement_identifier)))
			     ((type . "STRING")
			      (value . ":"))
			     ((type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . case_statement))
				       ((type . "CHOICE")
					(members ((type . "SYMBOL")
						  (name . labeled_statement))
						 ((type . "SYMBOL")
						  (name . compound_statement))
						 ((type . "SYMBOL")
						  (name . expression_statement))
						 ((type . "SYMBOL")
						  (name . if_statement))
						 ((type . "SYMBOL")
						  (name . switch_statement))
						 ((type . "SYMBOL")
						  (name . do_statement))
						 ((type . "SYMBOL")
						  (name . while_statement))
						 ((type . "SYMBOL")
						  (name . for_statement))
						 ((type . "SYMBOL")
						  (name . return_statement))
						 ((type . "SYMBOL")
						  (name . break_statement))
						 ((type . "SYMBOL")
						  (name . continue_statement))
						 ((type . "SYMBOL")
						  (name . goto_statement))))))))
 (expression_statement (type . "SEQ")
		       (members ((type . "CHOICE")
				 (members ((type . "CHOICE")
					   (members ((type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . conditional_expression))
							      ((type . "SYMBOL")
							       (name . assignment_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . update_expression))
							      ((type . "SYMBOL")
							       (name . cast_expression))
							      ((type . "SYMBOL")
							       (name . pointer_expression))
							      ((type . "SYMBOL")
							       (name . sizeof_expression))
							      ((type . "SYMBOL")
							       (name . subscript_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . field_expression))
							      ((type . "SYMBOL")
							       (name . compound_literal_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "SYMBOL")
							       (name . number_literal))
							      ((type . "SYMBOL")
							       (name . string_literal))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . null))
							      ((type . "SYMBOL")
							       (name . concatenated_string))
							      ((type . "SYMBOL")
							       (name . char_literal))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression))))
						    ((type . "SYMBOL")
						     (name . comma_expression))))
					  ((type . "BLANK"))))
				((type . "STRING")
				 (value . ";"))))
 (if_statement (type . "PREC_RIGHT")
	       (value . 0)
	       (content (type . "SEQ")
			(members ((type . "STRING")
				  (value . "if"))
				 ((type . "FIELD")
				  (name . "condition")
				  (content (type . "SYMBOL")
					   (name . parenthesized_expression)))
				 ((type . "FIELD")
				  (name . "consequence")
				  (content (type . "CHOICE")
					   (members ((type . "SYMBOL")
						     (name . case_statement))
						    ((type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . labeled_statement))
							      ((type . "SYMBOL")
							       (name . compound_statement))
							      ((type . "SYMBOL")
							       (name . expression_statement))
							      ((type . "SYMBOL")
							       (name . if_statement))
							      ((type . "SYMBOL")
							       (name . switch_statement))
							      ((type . "SYMBOL")
							       (name . do_statement))
							      ((type . "SYMBOL")
							       (name . while_statement))
							      ((type . "SYMBOL")
							       (name . for_statement))
							      ((type . "SYMBOL")
							       (name . return_statement))
							      ((type . "SYMBOL")
							       (name . break_statement))
							      ((type . "SYMBOL")
							       (name . continue_statement))
							      ((type . "SYMBOL")
							       (name . goto_statement)))))))
				 ((type . "CHOICE")
				  (members ((type . "SEQ")
					    (members ((type . "STRING")
						      (value . "else"))
						     ((type . "FIELD")
						      (name . "alternative")
						      (content (type . "CHOICE")
							       (members ((type . "SYMBOL")
									 (name . case_statement))
									((type . "CHOICE")
									 (members ((type . "SYMBOL")
										   (name . labeled_statement))
										  ((type . "SYMBOL")
										   (name . compound_statement))
										  ((type . "SYMBOL")
										   (name . expression_statement))
										  ((type . "SYMBOL")
										   (name . if_statement))
										  ((type . "SYMBOL")
										   (name . switch_statement))
										  ((type . "SYMBOL")
										   (name . do_statement))
										  ((type . "SYMBOL")
										   (name . while_statement))
										  ((type . "SYMBOL")
										   (name . for_statement))
										  ((type . "SYMBOL")
										   (name . return_statement))
										  ((type . "SYMBOL")
										   (name . break_statement))
										  ((type . "SYMBOL")
										   (name . continue_statement))
										  ((type . "SYMBOL")
										   (name . goto_statement)))))))))
					   ((type . "BLANK")))))))
 (switch_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "switch"))
			    ((type . "FIELD")
			     (name . "condition")
			     (content (type . "SYMBOL")
				      (name . parenthesized_expression)))
			    ((type . "FIELD")
			     (name . "body")
			     (content (type . "SYMBOL")
				      (name . compound_statement)))))
 (case_statement (type . "PREC_RIGHT")
		 (value . 0)
		 (content (type . "SEQ")
			  (members ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "STRING")
							(value . "case"))
						       ((type . "FIELD")
							(name . "value")
							(content (type . "CHOICE")
								 (members ((type . "SYMBOL")
									   (name . conditional_expression))
									  ((type . "SYMBOL")
									   (name . assignment_expression))
									  ((type . "SYMBOL")
									   (name . binary_expression))
									  ((type . "SYMBOL")
									   (name . unary_expression))
									  ((type . "SYMBOL")
									   (name . update_expression))
									  ((type . "SYMBOL")
									   (name . cast_expression))
									  ((type . "SYMBOL")
									   (name . pointer_expression))
									  ((type . "SYMBOL")
									   (name . sizeof_expression))
									  ((type . "SYMBOL")
									   (name . subscript_expression))
									  ((type . "SYMBOL")
									   (name . call_expression))
									  ((type . "SYMBOL")
									   (name . field_expression))
									  ((type . "SYMBOL")
									   (name . compound_literal_expression))
									  ((type . "SYMBOL")
									   (name . identifier))
									  ((type . "SYMBOL")
									   (name . number_literal))
									  ((type . "SYMBOL")
									   (name . string_literal))
									  ((type . "SYMBOL")
									   (name . true))
									  ((type . "SYMBOL")
									   (name . false))
									  ((type . "SYMBOL")
									   (name . null))
									  ((type . "SYMBOL")
									   (name . concatenated_string))
									  ((type . "SYMBOL")
									   (name . char_literal))
									  ((type . "SYMBOL")
									   (name . parenthesized_expression)))))))
					     ((type . "STRING")
					      (value . "default"))))
				   ((type . "STRING")
				    (value . ":"))
				   ((type . "REPEAT")
				    (content (type . "CHOICE")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . labeled_statement))
								((type . "SYMBOL")
								 (name . compound_statement))
								((type . "SYMBOL")
								 (name . expression_statement))
								((type . "SYMBOL")
								 (name . if_statement))
								((type . "SYMBOL")
								 (name . switch_statement))
								((type . "SYMBOL")
								 (name . do_statement))
								((type . "SYMBOL")
								 (name . while_statement))
								((type . "SYMBOL")
								 (name . for_statement))
								((type . "SYMBOL")
								 (name . return_statement))
								((type . "SYMBOL")
								 (name . break_statement))
								((type . "SYMBOL")
								 (name . continue_statement))
								((type . "SYMBOL")
								 (name . goto_statement))))
						      ((type . "SYMBOL")
						       (name . declaration))
						      ((type . "SYMBOL")
						       (name . type_definition))))))))
 (while_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "while"))
			   ((type . "FIELD")
			    (name . "condition")
			    (content (type . "SYMBOL")
				     (name . parenthesized_expression)))
			   ((type . "FIELD")
			    (name . "body")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . case_statement))
					      ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . labeled_statement))
							((type . "SYMBOL")
							 (name . compound_statement))
							((type . "SYMBOL")
							 (name . expression_statement))
							((type . "SYMBOL")
							 (name . if_statement))
							((type . "SYMBOL")
							 (name . switch_statement))
							((type . "SYMBOL")
							 (name . do_statement))
							((type . "SYMBOL")
							 (name . while_statement))
							((type . "SYMBOL")
							 (name . for_statement))
							((type . "SYMBOL")
							 (name . return_statement))
							((type . "SYMBOL")
							 (name . break_statement))
							((type . "SYMBOL")
							 (name . continue_statement))
							((type . "SYMBOL")
							 (name . goto_statement)))))))))
 (do_statement (type . "SEQ")
	       (members ((type . "STRING")
			 (value . "do"))
			((type . "FIELD")
			 (name . "body")
			 (content (type . "CHOICE")
				  (members ((type . "SYMBOL")
					    (name . case_statement))
					   ((type . "CHOICE")
					    (members ((type . "SYMBOL")
						      (name . labeled_statement))
						     ((type . "SYMBOL")
						      (name . compound_statement))
						     ((type . "SYMBOL")
						      (name . expression_statement))
						     ((type . "SYMBOL")
						      (name . if_statement))
						     ((type . "SYMBOL")
						      (name . switch_statement))
						     ((type . "SYMBOL")
						      (name . do_statement))
						     ((type . "SYMBOL")
						      (name . while_statement))
						     ((type . "SYMBOL")
						      (name . for_statement))
						     ((type . "SYMBOL")
						      (name . return_statement))
						     ((type . "SYMBOL")
						      (name . break_statement))
						     ((type . "SYMBOL")
						      (name . continue_statement))
						     ((type . "SYMBOL")
						      (name . goto_statement)))))))
			((type . "STRING")
			 (value . "while"))
			((type . "FIELD")
			 (name . "condition")
			 (content (type . "SYMBOL")
				  (name . parenthesized_expression)))
			((type . "STRING")
			 (value . ";"))))
 (for_statement (type . "SEQ")
		(members ((type . "STRING")
			  (value . "for"))
			 ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "FIELD")
				    (name . "initializer")
				    (content (type . "SYMBOL")
					     (name . declaration)))
				   ((type . "SEQ")
				    (members ((type . "FIELD")
					      (name . "initializer")
					      (content (type . "CHOICE")
						       (members ((type . "CHOICE")
								 (members ((type . "CHOICE")
									   (members ((type . "SYMBOL")
										     (name . conditional_expression))
										    ((type . "SYMBOL")
										     (name . assignment_expression))
										    ((type . "SYMBOL")
										     (name . binary_expression))
										    ((type . "SYMBOL")
										     (name . unary_expression))
										    ((type . "SYMBOL")
										     (name . update_expression))
										    ((type . "SYMBOL")
										     (name . cast_expression))
										    ((type . "SYMBOL")
										     (name . pointer_expression))
										    ((type . "SYMBOL")
										     (name . sizeof_expression))
										    ((type . "SYMBOL")
										     (name . subscript_expression))
										    ((type . "SYMBOL")
										     (name . call_expression))
										    ((type . "SYMBOL")
										     (name . field_expression))
										    ((type . "SYMBOL")
										     (name . compound_literal_expression))
										    ((type . "SYMBOL")
										     (name . identifier))
										    ((type . "SYMBOL")
										     (name . number_literal))
										    ((type . "SYMBOL")
										     (name . string_literal))
										    ((type . "SYMBOL")
										     (name . true))
										    ((type . "SYMBOL")
										     (name . false))
										    ((type . "SYMBOL")
										     (name . null))
										    ((type . "SYMBOL")
										     (name . concatenated_string))
										    ((type . "SYMBOL")
										     (name . char_literal))
										    ((type . "SYMBOL")
										     (name . parenthesized_expression))))
									  ((type . "SYMBOL")
									   (name . comma_expression))))
								((type . "BLANK")))))
					     ((type . "STRING")
					      (value . ";"))))))
			 ((type . "FIELD")
			  (name . "condition")
			  (content (type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "SYMBOL")
						       (name . conditional_expression))
						      ((type . "SYMBOL")
						       (name . assignment_expression))
						      ((type . "SYMBOL")
						       (name . binary_expression))
						      ((type . "SYMBOL")
						       (name . unary_expression))
						      ((type . "SYMBOL")
						       (name . update_expression))
						      ((type . "SYMBOL")
						       (name . cast_expression))
						      ((type . "SYMBOL")
						       (name . pointer_expression))
						      ((type . "SYMBOL")
						       (name . sizeof_expression))
						      ((type . "SYMBOL")
						       (name . subscript_expression))
						      ((type . "SYMBOL")
						       (name . call_expression))
						      ((type . "SYMBOL")
						       (name . field_expression))
						      ((type . "SYMBOL")
						       (name . compound_literal_expression))
						      ((type . "SYMBOL")
						       (name . identifier))
						      ((type . "SYMBOL")
						       (name . number_literal))
						      ((type . "SYMBOL")
						       (name . string_literal))
						      ((type . "SYMBOL")
						       (name . true))
						      ((type . "SYMBOL")
						       (name . false))
						      ((type . "SYMBOL")
						       (name . null))
						      ((type . "SYMBOL")
						       (name . concatenated_string))
						      ((type . "SYMBOL")
						       (name . char_literal))
						      ((type . "SYMBOL")
						       (name . parenthesized_expression))))
					    ((type . "BLANK")))))
			 ((type . "STRING")
			  (value . ";"))
			 ((type . "FIELD")
			  (name . "update")
			  (content (type . "CHOICE")
				   (members ((type . "CHOICE")
					     (members ((type . "CHOICE")
						       (members ((type . "SYMBOL")
								 (name . conditional_expression))
								((type . "SYMBOL")
								 (name . assignment_expression))
								((type . "SYMBOL")
								 (name . binary_expression))
								((type . "SYMBOL")
								 (name . unary_expression))
								((type . "SYMBOL")
								 (name . update_expression))
								((type . "SYMBOL")
								 (name . cast_expression))
								((type . "SYMBOL")
								 (name . pointer_expression))
								((type . "SYMBOL")
								 (name . sizeof_expression))
								((type . "SYMBOL")
								 (name . subscript_expression))
								((type . "SYMBOL")
								 (name . call_expression))
								((type . "SYMBOL")
								 (name . field_expression))
								((type . "SYMBOL")
								 (name . compound_literal_expression))
								((type . "SYMBOL")
								 (name . identifier))
								((type . "SYMBOL")
								 (name . number_literal))
								((type . "SYMBOL")
								 (name . string_literal))
								((type . "SYMBOL")
								 (name . true))
								((type . "SYMBOL")
								 (name . false))
								((type . "SYMBOL")
								 (name . null))
								((type . "SYMBOL")
								 (name . concatenated_string))
								((type . "SYMBOL")
								 (name . char_literal))
								((type . "SYMBOL")
								 (name . parenthesized_expression))))
						      ((type . "SYMBOL")
						       (name . comma_expression))))
					    ((type . "BLANK")))))
			 ((type . "STRING")
			  (value . ")"))
			 ((type . "CHOICE")
			  (members ((type . "SYMBOL")
				    (name . case_statement))
				   ((type . "CHOICE")
				    (members ((type . "SYMBOL")
					      (name . labeled_statement))
					     ((type . "SYMBOL")
					      (name . compound_statement))
					     ((type . "SYMBOL")
					      (name . expression_statement))
					     ((type . "SYMBOL")
					      (name . if_statement))
					     ((type . "SYMBOL")
					      (name . switch_statement))
					     ((type . "SYMBOL")
					      (name . do_statement))
					     ((type . "SYMBOL")
					      (name . while_statement))
					     ((type . "SYMBOL")
					      (name . for_statement))
					     ((type . "SYMBOL")
					      (name . return_statement))
					     ((type . "SYMBOL")
					      (name . break_statement))
					     ((type . "SYMBOL")
					      (name . continue_statement))
					     ((type . "SYMBOL")
					      (name . goto_statement))))))))
 (return_statement (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "return"))
			    ((type . "CHOICE")
			     (members ((type . "CHOICE")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . conditional_expression))
							  ((type . "SYMBOL")
							   (name . assignment_expression))
							  ((type . "SYMBOL")
							   (name . binary_expression))
							  ((type . "SYMBOL")
							   (name . unary_expression))
							  ((type . "SYMBOL")
							   (name . update_expression))
							  ((type . "SYMBOL")
							   (name . cast_expression))
							  ((type . "SYMBOL")
							   (name . pointer_expression))
							  ((type . "SYMBOL")
							   (name . sizeof_expression))
							  ((type . "SYMBOL")
							   (name . subscript_expression))
							  ((type . "SYMBOL")
							   (name . call_expression))
							  ((type . "SYMBOL")
							   (name . field_expression))
							  ((type . "SYMBOL")
							   (name . compound_literal_expression))
							  ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "SYMBOL")
							   (name . number_literal))
							  ((type . "SYMBOL")
							   (name . string_literal))
							  ((type . "SYMBOL")
							   (name . true))
							  ((type . "SYMBOL")
							   (name . false))
							  ((type . "SYMBOL")
							   (name . null))
							  ((type . "SYMBOL")
							   (name . concatenated_string))
							  ((type . "SYMBOL")
							   (name . char_literal))
							  ((type . "SYMBOL")
							   (name . parenthesized_expression))))
						((type . "SYMBOL")
						 (name . comma_expression))))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . ";"))))
 (break_statement (type . "SEQ")
		  (members ((type . "STRING")
			    (value . "break"))
			   ((type . "STRING")
			    (value . ";"))))
 (continue_statement (type . "SEQ")
		     (members ((type . "STRING")
			       (value . "continue"))
			      ((type . "STRING")
			       (value . ";"))))
 (goto_statement (type . "SEQ")
		 (members ((type . "STRING")
			   (value . "goto"))
			  ((type . "FIELD")
			   (name . "label")
			   (content (type . "ALIAS")
				    (content (type . "SYMBOL")
					     (name . identifier))
				    (named . t)
				    (value . statement_identifier)))
			  ((type . "STRING")
			   (value . ";"))))
 (_expression (type . "CHOICE")
	      (members ((type . "SYMBOL")
			(name . conditional_expression))
		       ((type . "SYMBOL")
			(name . assignment_expression))
		       ((type . "SYMBOL")
			(name . binary_expression))
		       ((type . "SYMBOL")
			(name . unary_expression))
		       ((type . "SYMBOL")
			(name . update_expression))
		       ((type . "SYMBOL")
			(name . cast_expression))
		       ((type . "SYMBOL")
			(name . pointer_expression))
		       ((type . "SYMBOL")
			(name . sizeof_expression))
		       ((type . "SYMBOL")
			(name . subscript_expression))
		       ((type . "SYMBOL")
			(name . call_expression))
		       ((type . "SYMBOL")
			(name . field_expression))
		       ((type . "SYMBOL")
			(name . compound_literal_expression))
		       ((type . "SYMBOL")
			(name . identifier))
		       ((type . "SYMBOL")
			(name . number_literal))
		       ((type . "SYMBOL")
			(name . string_literal))
		       ((type . "SYMBOL")
			(name . true))
		       ((type . "SYMBOL")
			(name . false))
		       ((type . "SYMBOL")
			(name . null))
		       ((type . "SYMBOL")
			(name . concatenated_string))
		       ((type . "SYMBOL")
			(name . char_literal))
		       ((type . "SYMBOL")
			(name . parenthesized_expression))))
 (comma_expression (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "left")
			     (content (type . "CHOICE")
				      (members ((type . "SYMBOL")
						(name . conditional_expression))
					       ((type . "SYMBOL")
						(name . assignment_expression))
					       ((type . "SYMBOL")
						(name . binary_expression))
					       ((type . "SYMBOL")
						(name . unary_expression))
					       ((type . "SYMBOL")
						(name . update_expression))
					       ((type . "SYMBOL")
						(name . cast_expression))
					       ((type . "SYMBOL")
						(name . pointer_expression))
					       ((type . "SYMBOL")
						(name . sizeof_expression))
					       ((type . "SYMBOL")
						(name . subscript_expression))
					       ((type . "SYMBOL")
						(name . call_expression))
					       ((type . "SYMBOL")
						(name . field_expression))
					       ((type . "SYMBOL")
						(name . compound_literal_expression))
					       ((type . "SYMBOL")
						(name . identifier))
					       ((type . "SYMBOL")
						(name . number_literal))
					       ((type . "SYMBOL")
						(name . string_literal))
					       ((type . "SYMBOL")
						(name . true))
					       ((type . "SYMBOL")
						(name . false))
					       ((type . "SYMBOL")
						(name . null))
					       ((type . "SYMBOL")
						(name . concatenated_string))
					       ((type . "SYMBOL")
						(name . char_literal))
					       ((type . "SYMBOL")
						(name . parenthesized_expression)))))
			    ((type . "STRING")
			     (value . ","))
			    ((type . "FIELD")
			     (name . "right")
			     (content (type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . conditional_expression))
							 ((type . "SYMBOL")
							  (name . assignment_expression))
							 ((type . "SYMBOL")
							  (name . binary_expression))
							 ((type . "SYMBOL")
							  (name . unary_expression))
							 ((type . "SYMBOL")
							  (name . update_expression))
							 ((type . "SYMBOL")
							  (name . cast_expression))
							 ((type . "SYMBOL")
							  (name . pointer_expression))
							 ((type . "SYMBOL")
							  (name . sizeof_expression))
							 ((type . "SYMBOL")
							  (name . subscript_expression))
							 ((type . "SYMBOL")
							  (name . call_expression))
							 ((type . "SYMBOL")
							  (name . field_expression))
							 ((type . "SYMBOL")
							  (name . compound_literal_expression))
							 ((type . "SYMBOL")
							  (name . identifier))
							 ((type . "SYMBOL")
							  (name . number_literal))
							 ((type . "SYMBOL")
							  (name . string_literal))
							 ((type . "SYMBOL")
							  (name . true))
							 ((type . "SYMBOL")
							  (name . false))
							 ((type . "SYMBOL")
							  (name . null))
							 ((type . "SYMBOL")
							  (name . concatenated_string))
							 ((type . "SYMBOL")
							  (name . char_literal))
							 ((type . "SYMBOL")
							  (name . parenthesized_expression))))
					       ((type . "SYMBOL")
						(name . comma_expression)))))))
 (conditional_expression (type . "PREC_RIGHT")
			 (value . -2)
			 (content (type . "SEQ")
				  (members ((type . "FIELD")
					    (name . "condition")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . conditional_expression))
							      ((type . "SYMBOL")
							       (name . assignment_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . update_expression))
							      ((type . "SYMBOL")
							       (name . cast_expression))
							      ((type . "SYMBOL")
							       (name . pointer_expression))
							      ((type . "SYMBOL")
							       (name . sizeof_expression))
							      ((type . "SYMBOL")
							       (name . subscript_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . field_expression))
							      ((type . "SYMBOL")
							       (name . compound_literal_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "SYMBOL")
							       (name . number_literal))
							      ((type . "SYMBOL")
							       (name . string_literal))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . null))
							      ((type . "SYMBOL")
							       (name . concatenated_string))
							      ((type . "SYMBOL")
							       (name . char_literal))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression)))))
					   ((type . "STRING")
					    (value . "?"))
					   ((type . "FIELD")
					    (name . "consequence")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . conditional_expression))
							      ((type . "SYMBOL")
							       (name . assignment_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . update_expression))
							      ((type . "SYMBOL")
							       (name . cast_expression))
							      ((type . "SYMBOL")
							       (name . pointer_expression))
							      ((type . "SYMBOL")
							       (name . sizeof_expression))
							      ((type . "SYMBOL")
							       (name . subscript_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . field_expression))
							      ((type . "SYMBOL")
							       (name . compound_literal_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "SYMBOL")
							       (name . number_literal))
							      ((type . "SYMBOL")
							       (name . string_literal))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . null))
							      ((type . "SYMBOL")
							       (name . concatenated_string))
							      ((type . "SYMBOL")
							       (name . char_literal))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression)))))
					   ((type . "STRING")
					    (value . ":"))
					   ((type . "FIELD")
					    (name . "alternative")
					    (content (type . "CHOICE")
						     (members ((type . "SYMBOL")
							       (name . conditional_expression))
							      ((type . "SYMBOL")
							       (name . assignment_expression))
							      ((type . "SYMBOL")
							       (name . binary_expression))
							      ((type . "SYMBOL")
							       (name . unary_expression))
							      ((type . "SYMBOL")
							       (name . update_expression))
							      ((type . "SYMBOL")
							       (name . cast_expression))
							      ((type . "SYMBOL")
							       (name . pointer_expression))
							      ((type . "SYMBOL")
							       (name . sizeof_expression))
							      ((type . "SYMBOL")
							       (name . subscript_expression))
							      ((type . "SYMBOL")
							       (name . call_expression))
							      ((type . "SYMBOL")
							       (name . field_expression))
							      ((type . "SYMBOL")
							       (name . compound_literal_expression))
							      ((type . "SYMBOL")
							       (name . identifier))
							      ((type . "SYMBOL")
							       (name . number_literal))
							      ((type . "SYMBOL")
							       (name . string_literal))
							      ((type . "SYMBOL")
							       (name . true))
							      ((type . "SYMBOL")
							       (name . false))
							      ((type . "SYMBOL")
							       (name . null))
							      ((type . "SYMBOL")
							       (name . concatenated_string))
							      ((type . "SYMBOL")
							       (name . char_literal))
							      ((type . "SYMBOL")
							       (name . parenthesized_expression))))))))
 (_assignment_left_expression (type . "CHOICE")
			      (members ((type . "SYMBOL")
					(name . identifier))
				       ((type . "SYMBOL")
					(name . call_expression))
				       ((type . "SYMBOL")
					(name . field_expression))
				       ((type . "SYMBOL")
					(name . pointer_expression))
				       ((type . "SYMBOL")
					(name . subscript_expression))
				       ((type . "SYMBOL")
					(name . parenthesized_expression))))
 (assignment_expression (type . "PREC_RIGHT")
			(value . -1)
			(content (type . "SEQ")
				 (members ((type . "FIELD")
					   (name . "left")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "SYMBOL")
							      (name . call_expression))
							     ((type . "SYMBOL")
							      (name . field_expression))
							     ((type . "SYMBOL")
							      (name . pointer_expression))
							     ((type . "SYMBOL")
							      (name . subscript_expression))
							     ((type . "SYMBOL")
							      (name . parenthesized_expression)))))
					  ((type . "CHOICE")
					   (members ((type . "STRING")
						     (value . "="))
						    ((type . "STRING")
						     (value . "*="))
						    ((type . "STRING")
						     (value . "/="))
						    ((type . "STRING")
						     (value . "%="))
						    ((type . "STRING")
						     (value . "+="))
						    ((type . "STRING")
						     (value . "-="))
						    ((type . "STRING")
						     (value . "<<="))
						    ((type . "STRING")
						     (value . ">>="))
						    ((type . "STRING")
						     (value . "&="))
						    ((type . "STRING")
						     (value . "^="))
						    ((type . "STRING")
						     (value . "|="))))
					  ((type . "FIELD")
					   (name . "right")
					   (content (type . "CHOICE")
						    (members ((type . "SYMBOL")
							      (name . conditional_expression))
							     ((type . "SYMBOL")
							      (name . assignment_expression))
							     ((type . "SYMBOL")
							      (name . binary_expression))
							     ((type . "SYMBOL")
							      (name . unary_expression))
							     ((type . "SYMBOL")
							      (name . update_expression))
							     ((type . "SYMBOL")
							      (name . cast_expression))
							     ((type . "SYMBOL")
							      (name . pointer_expression))
							     ((type . "SYMBOL")
							      (name . sizeof_expression))
							     ((type . "SYMBOL")
							      (name . subscript_expression))
							     ((type . "SYMBOL")
							      (name . call_expression))
							     ((type . "SYMBOL")
							      (name . field_expression))
							     ((type . "SYMBOL")
							      (name . compound_literal_expression))
							     ((type . "SYMBOL")
							      (name . identifier))
							     ((type . "SYMBOL")
							      (name . number_literal))
							     ((type . "SYMBOL")
							      (name . string_literal))
							     ((type . "SYMBOL")
							      (name . true))
							     ((type . "SYMBOL")
							      (name . false))
							     ((type . "SYMBOL")
							      (name . null))
							     ((type . "SYMBOL")
							      (name . concatenated_string))
							     ((type . "SYMBOL")
							      (name . char_literal))
							     ((type . "SYMBOL")
							      (name . parenthesized_expression))))))))
 (pointer_expression (type . "PREC_LEFT")
		     (value . 12)
		     (content (type . "SEQ")
			      (members ((type . "FIELD")
					(name . "operator")
					(content (type . "CHOICE")
						 (members ((type . "STRING")
							   (value . "*"))
							  ((type . "STRING")
							   (value . "&")))))
				       ((type . "FIELD")
					(name . "argument")
					(content (type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . conditional_expression))
							  ((type . "SYMBOL")
							   (name . assignment_expression))
							  ((type . "SYMBOL")
							   (name . binary_expression))
							  ((type . "SYMBOL")
							   (name . unary_expression))
							  ((type . "SYMBOL")
							   (name . update_expression))
							  ((type . "SYMBOL")
							   (name . cast_expression))
							  ((type . "SYMBOL")
							   (name . pointer_expression))
							  ((type . "SYMBOL")
							   (name . sizeof_expression))
							  ((type . "SYMBOL")
							   (name . subscript_expression))
							  ((type . "SYMBOL")
							   (name . call_expression))
							  ((type . "SYMBOL")
							   (name . field_expression))
							  ((type . "SYMBOL")
							   (name . compound_literal_expression))
							  ((type . "SYMBOL")
							   (name . identifier))
							  ((type . "SYMBOL")
							   (name . number_literal))
							  ((type . "SYMBOL")
							   (name . string_literal))
							  ((type . "SYMBOL")
							   (name . true))
							  ((type . "SYMBOL")
							   (name . false))
							  ((type . "SYMBOL")
							   (name . null))
							  ((type . "SYMBOL")
							   (name . concatenated_string))
							  ((type . "SYMBOL")
							   (name . char_literal))
							  ((type . "SYMBOL")
							   (name . parenthesized_expression))))))))
 (unary_expression (type . "PREC_LEFT")
		   (value . 13)
		   (content (type . "SEQ")
			    (members ((type . "FIELD")
				      (name . "operator")
				      (content (type . "CHOICE")
					       (members ((type . "STRING")
							 (value . "!"))
							((type . "STRING")
							 (value . "~"))
							((type . "STRING")
							 (value . "-"))
							((type . "STRING")
							 (value . "+")))))
				     ((type . "FIELD")
				      (name . "argument")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . conditional_expression))
							((type . "SYMBOL")
							 (name . assignment_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . update_expression))
							((type . "SYMBOL")
							 (name . cast_expression))
							((type . "SYMBOL")
							 (name . pointer_expression))
							((type . "SYMBOL")
							 (name . sizeof_expression))
							((type . "SYMBOL")
							 (name . subscript_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . field_expression))
							((type . "SYMBOL")
							 (name . compound_literal_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "SYMBOL")
							 (name . number_literal))
							((type . "SYMBOL")
							 (name . string_literal))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . null))
							((type . "SYMBOL")
							 (name . concatenated_string))
							((type . "SYMBOL")
							 (name . char_literal))
							((type . "SYMBOL")
							 (name . parenthesized_expression))))))))
 (binary_expression (type . "CHOICE")
		    (members ((type . "PREC_LEFT")
			      (value . 10)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "+")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 10)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "-")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 11)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "*")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 11)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "/")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 11)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "%")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 1)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "||")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 2)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 3)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "|")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 4)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "^")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 5)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "&")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "==")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 6)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "!=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 7)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 7)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 7)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<=")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 7)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 9)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . "<<")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))
			     ((type . "PREC_LEFT")
			      (value . 9)
			      (content (type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "left")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "STRING")
							  (value . ">>")))
						((type . "FIELD")
						 (name . "right")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression))))))))))
 (update_expression (type . "PREC_RIGHT")
		    (value . 13)
		    (content (type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "--"))
								   ((type . "STRING")
								    (value . "++")))))
						((type . "FIELD")
						 (name . "argument")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))))
				      ((type . "SEQ")
				       (members ((type . "FIELD")
						 (name . "argument")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "FIELD")
						 (name . "operator")
						 (content (type . "CHOICE")
							  (members ((type . "STRING")
								    (value . "--"))
								   ((type . "STRING")
								    (value . "++"))))))))))
 (cast_expression (type . "PREC")
		  (value . 12)
		  (content (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "FIELD")
				     (name . "type")
				     (content (type . "SYMBOL")
					      (name . type_descriptor)))
				    ((type . "STRING")
				     (value . ")"))
				    ((type . "FIELD")
				     (name . "value")
				     (content (type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . conditional_expression))
						       ((type . "SYMBOL")
							(name . assignment_expression))
						       ((type . "SYMBOL")
							(name . binary_expression))
						       ((type . "SYMBOL")
							(name . unary_expression))
						       ((type . "SYMBOL")
							(name . update_expression))
						       ((type . "SYMBOL")
							(name . cast_expression))
						       ((type . "SYMBOL")
							(name . pointer_expression))
						       ((type . "SYMBOL")
							(name . sizeof_expression))
						       ((type . "SYMBOL")
							(name . subscript_expression))
						       ((type . "SYMBOL")
							(name . call_expression))
						       ((type . "SYMBOL")
							(name . field_expression))
						       ((type . "SYMBOL")
							(name . compound_literal_expression))
						       ((type . "SYMBOL")
							(name . identifier))
						       ((type . "SYMBOL")
							(name . number_literal))
						       ((type . "SYMBOL")
							(name . string_literal))
						       ((type . "SYMBOL")
							(name . true))
						       ((type . "SYMBOL")
							(name . false))
						       ((type . "SYMBOL")
							(name . null))
						       ((type . "SYMBOL")
							(name . concatenated_string))
						       ((type . "SYMBOL")
							(name . char_literal))
						       ((type . "SYMBOL")
							(name . parenthesized_expression))))))))
 (type_descriptor (type . "SEQ")
		  (members ((type . "REPEAT")
			    (content (type . "SYMBOL")
				     (name . type_qualifier)))
			   ((type . "FIELD")
			    (name . "type")
			    (content (type . "CHOICE")
				     (members ((type . "SYMBOL")
					       (name . struct_specifier))
					      ((type . "SYMBOL")
					       (name . union_specifier))
					      ((type . "SYMBOL")
					       (name . enum_specifier))
					      ((type . "SYMBOL")
					       (name . macro_type_specifier))
					      ((type . "SYMBOL")
					       (name . sized_type_specifier))
					      ((type . "SYMBOL")
					       (name . primitive_type))
					      ((type . "ALIAS")
					       (content (type . "SYMBOL")
							(name . identifier))
					       (named . t)
					       (value . type_identifier)))))
			   ((type . "REPEAT")
			    (content (type . "SYMBOL")
				     (name . type_qualifier)))
			   ((type . "FIELD")
			    (name . "declarator")
			    (content (type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . abstract_pointer_declarator))
							((type . "SYMBOL")
							 (name . abstract_function_declarator))
							((type . "SYMBOL")
							 (name . abstract_array_declarator))
							((type . "SYMBOL")
							 (name . abstract_parenthesized_declarator))))
					      ((type . "BLANK")))))))
 (sizeof_expression (type . "PREC")
		    (value . 8)
		    (content (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "sizeof"))
				      ((type . "CHOICE")
				       (members ((type . "FIELD")
						 (name . "value")
						 (content (type . "CHOICE")
							  (members ((type . "SYMBOL")
								    (name . conditional_expression))
								   ((type . "SYMBOL")
								    (name . assignment_expression))
								   ((type . "SYMBOL")
								    (name . binary_expression))
								   ((type . "SYMBOL")
								    (name . unary_expression))
								   ((type . "SYMBOL")
								    (name . update_expression))
								   ((type . "SYMBOL")
								    (name . cast_expression))
								   ((type . "SYMBOL")
								    (name . pointer_expression))
								   ((type . "SYMBOL")
								    (name . sizeof_expression))
								   ((type . "SYMBOL")
								    (name . subscript_expression))
								   ((type . "SYMBOL")
								    (name . call_expression))
								   ((type . "SYMBOL")
								    (name . field_expression))
								   ((type . "SYMBOL")
								    (name . compound_literal_expression))
								   ((type . "SYMBOL")
								    (name . identifier))
								   ((type . "SYMBOL")
								    (name . number_literal))
								   ((type . "SYMBOL")
								    (name . string_literal))
								   ((type . "SYMBOL")
								    (name . true))
								   ((type . "SYMBOL")
								    (name . false))
								   ((type . "SYMBOL")
								    (name . null))
								   ((type . "SYMBOL")
								    (name . concatenated_string))
								   ((type . "SYMBOL")
								    (name . char_literal))
								   ((type . "SYMBOL")
								    (name . parenthesized_expression)))))
						((type . "SEQ")
						 (members ((type . "STRING")
							   (value . "("))
							  ((type . "FIELD")
							   (name . "type")
							   (content (type . "SYMBOL")
								    (name . type_descriptor)))
							  ((type . "STRING")
							   (value . ")")))))))))
 (subscript_expression (type . "PREC")
		       (value . 16)
		       (content (type . "SEQ")
				(members ((type . "FIELD")
					  (name . "argument")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . conditional_expression))
							    ((type . "SYMBOL")
							     (name . assignment_expression))
							    ((type . "SYMBOL")
							     (name . binary_expression))
							    ((type . "SYMBOL")
							     (name . unary_expression))
							    ((type . "SYMBOL")
							     (name . update_expression))
							    ((type . "SYMBOL")
							     (name . cast_expression))
							    ((type . "SYMBOL")
							     (name . pointer_expression))
							    ((type . "SYMBOL")
							     (name . sizeof_expression))
							    ((type . "SYMBOL")
							     (name . subscript_expression))
							    ((type . "SYMBOL")
							     (name . call_expression))
							    ((type . "SYMBOL")
							     (name . field_expression))
							    ((type . "SYMBOL")
							     (name . compound_literal_expression))
							    ((type . "SYMBOL")
							     (name . identifier))
							    ((type . "SYMBOL")
							     (name . number_literal))
							    ((type . "SYMBOL")
							     (name . string_literal))
							    ((type . "SYMBOL")
							     (name . true))
							    ((type . "SYMBOL")
							     (name . false))
							    ((type . "SYMBOL")
							     (name . null))
							    ((type . "SYMBOL")
							     (name . concatenated_string))
							    ((type . "SYMBOL")
							     (name . char_literal))
							    ((type . "SYMBOL")
							     (name . parenthesized_expression)))))
					 ((type . "STRING")
					  (value . "["))
					 ((type . "FIELD")
					  (name . "index")
					  (content (type . "CHOICE")
						   (members ((type . "SYMBOL")
							     (name . conditional_expression))
							    ((type . "SYMBOL")
							     (name . assignment_expression))
							    ((type . "SYMBOL")
							     (name . binary_expression))
							    ((type . "SYMBOL")
							     (name . unary_expression))
							    ((type . "SYMBOL")
							     (name . update_expression))
							    ((type . "SYMBOL")
							     (name . cast_expression))
							    ((type . "SYMBOL")
							     (name . pointer_expression))
							    ((type . "SYMBOL")
							     (name . sizeof_expression))
							    ((type . "SYMBOL")
							     (name . subscript_expression))
							    ((type . "SYMBOL")
							     (name . call_expression))
							    ((type . "SYMBOL")
							     (name . field_expression))
							    ((type . "SYMBOL")
							     (name . compound_literal_expression))
							    ((type . "SYMBOL")
							     (name . identifier))
							    ((type . "SYMBOL")
							     (name . number_literal))
							    ((type . "SYMBOL")
							     (name . string_literal))
							    ((type . "SYMBOL")
							     (name . true))
							    ((type . "SYMBOL")
							     (name . false))
							    ((type . "SYMBOL")
							     (name . null))
							    ((type . "SYMBOL")
							     (name . concatenated_string))
							    ((type . "SYMBOL")
							     (name . char_literal))
							    ((type . "SYMBOL")
							     (name . parenthesized_expression)))))
					 ((type . "STRING")
					  (value . "]")))))
 (call_expression (type . "PREC")
		  (value . 14)
		  (content (type . "SEQ")
			   (members ((type . "FIELD")
				     (name . "function")
				     (content (type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . conditional_expression))
						       ((type . "SYMBOL")
							(name . assignment_expression))
						       ((type . "SYMBOL")
							(name . binary_expression))
						       ((type . "SYMBOL")
							(name . unary_expression))
						       ((type . "SYMBOL")
							(name . update_expression))
						       ((type . "SYMBOL")
							(name . cast_expression))
						       ((type . "SYMBOL")
							(name . pointer_expression))
						       ((type . "SYMBOL")
							(name . sizeof_expression))
						       ((type . "SYMBOL")
							(name . subscript_expression))
						       ((type . "SYMBOL")
							(name . call_expression))
						       ((type . "SYMBOL")
							(name . field_expression))
						       ((type . "SYMBOL")
							(name . compound_literal_expression))
						       ((type . "SYMBOL")
							(name . identifier))
						       ((type . "SYMBOL")
							(name . number_literal))
						       ((type . "SYMBOL")
							(name . string_literal))
						       ((type . "SYMBOL")
							(name . true))
						       ((type . "SYMBOL")
							(name . false))
						       ((type . "SYMBOL")
							(name . null))
						       ((type . "SYMBOL")
							(name . concatenated_string))
						       ((type . "SYMBOL")
							(name . char_literal))
						       ((type . "SYMBOL")
							(name . parenthesized_expression)))))
				    ((type . "FIELD")
				     (name . "arguments")
				     (content (type . "SYMBOL")
					      (name . argument_list))))))
 (argument_list (type . "SEQ")
		(members ((type . "STRING")
			  (value . "("))
			 ((type . "CHOICE")
			  (members ((type . "SEQ")
				    (members ((type . "CHOICE")
					      (members ((type . "SYMBOL")
							(name . conditional_expression))
						       ((type . "SYMBOL")
							(name . assignment_expression))
						       ((type . "SYMBOL")
							(name . binary_expression))
						       ((type . "SYMBOL")
							(name . unary_expression))
						       ((type . "SYMBOL")
							(name . update_expression))
						       ((type . "SYMBOL")
							(name . cast_expression))
						       ((type . "SYMBOL")
							(name . pointer_expression))
						       ((type . "SYMBOL")
							(name . sizeof_expression))
						       ((type . "SYMBOL")
							(name . subscript_expression))
						       ((type . "SYMBOL")
							(name . call_expression))
						       ((type . "SYMBOL")
							(name . field_expression))
						       ((type . "SYMBOL")
							(name . compound_literal_expression))
						       ((type . "SYMBOL")
							(name . identifier))
						       ((type . "SYMBOL")
							(name . number_literal))
						       ((type . "SYMBOL")
							(name . string_literal))
						       ((type . "SYMBOL")
							(name . true))
						       ((type . "SYMBOL")
							(name . false))
						       ((type . "SYMBOL")
							(name . null))
						       ((type . "SYMBOL")
							(name . concatenated_string))
						       ((type . "SYMBOL")
							(name . char_literal))
						       ((type . "SYMBOL")
							(name . parenthesized_expression))))
					     ((type . "REPEAT")
					      (content (type . "SEQ")
						       (members ((type . "STRING")
								 (value . ","))
								((type . "CHOICE")
								 (members ((type . "SYMBOL")
									   (name . conditional_expression))
									  ((type . "SYMBOL")
									   (name . assignment_expression))
									  ((type . "SYMBOL")
									   (name . binary_expression))
									  ((type . "SYMBOL")
									   (name . unary_expression))
									  ((type . "SYMBOL")
									   (name . update_expression))
									  ((type . "SYMBOL")
									   (name . cast_expression))
									  ((type . "SYMBOL")
									   (name . pointer_expression))
									  ((type . "SYMBOL")
									   (name . sizeof_expression))
									  ((type . "SYMBOL")
									   (name . subscript_expression))
									  ((type . "SYMBOL")
									   (name . call_expression))
									  ((type . "SYMBOL")
									   (name . field_expression))
									  ((type . "SYMBOL")
									   (name . compound_literal_expression))
									  ((type . "SYMBOL")
									   (name . identifier))
									  ((type . "SYMBOL")
									   (name . number_literal))
									  ((type . "SYMBOL")
									   (name . string_literal))
									  ((type . "SYMBOL")
									   (name . true))
									  ((type . "SYMBOL")
									   (name . false))
									  ((type . "SYMBOL")
									   (name . null))
									  ((type . "SYMBOL")
									   (name . concatenated_string))
									  ((type . "SYMBOL")
									   (name . char_literal))
									  ((type . "SYMBOL")
									   (name . parenthesized_expression)))))))))
				   ((type . "BLANK"))))
			 ((type . "STRING")
			  (value . ")"))))
 (field_expression (type . "SEQ")
		   (members ((type . "PREC")
			     (value . 15)
			     (content (type . "SEQ")
				      (members ((type . "FIELD")
						(name . "argument")
						(content (type . "CHOICE")
							 (members ((type . "SYMBOL")
								   (name . conditional_expression))
								  ((type . "SYMBOL")
								   (name . assignment_expression))
								  ((type . "SYMBOL")
								   (name . binary_expression))
								  ((type . "SYMBOL")
								   (name . unary_expression))
								  ((type . "SYMBOL")
								   (name . update_expression))
								  ((type . "SYMBOL")
								   (name . cast_expression))
								  ((type . "SYMBOL")
								   (name . pointer_expression))
								  ((type . "SYMBOL")
								   (name . sizeof_expression))
								  ((type . "SYMBOL")
								   (name . subscript_expression))
								  ((type . "SYMBOL")
								   (name . call_expression))
								  ((type . "SYMBOL")
								   (name . field_expression))
								  ((type . "SYMBOL")
								   (name . compound_literal_expression))
								  ((type . "SYMBOL")
								   (name . identifier))
								  ((type . "SYMBOL")
								   (name . number_literal))
								  ((type . "SYMBOL")
								   (name . string_literal))
								  ((type . "SYMBOL")
								   (name . true))
								  ((type . "SYMBOL")
								   (name . false))
								  ((type . "SYMBOL")
								   (name . null))
								  ((type . "SYMBOL")
								   (name . concatenated_string))
								  ((type . "SYMBOL")
								   (name . char_literal))
								  ((type . "SYMBOL")
								   (name . parenthesized_expression)))))
					       ((type . "CHOICE")
						(members ((type . "STRING")
							  (value . "."))
							 ((type . "STRING")
							  (value . "->")))))))
			    ((type . "FIELD")
			     (name . "field")
			     (content (type . "ALIAS")
				      (content (type . "SYMBOL")
					       (name . identifier))
				      (named . t)
				      (value . field_identifier)))))
 (compound_literal_expression (type . "SEQ")
			      (members ((type . "STRING")
					(value . "("))
				       ((type . "FIELD")
					(name . "type")
					(content (type . "SYMBOL")
						 (name . type_descriptor)))
				       ((type . "STRING")
					(value . ")"))
				       ((type . "FIELD")
					(name . "value")
					(content (type . "SYMBOL")
						 (name . initializer_list)))))
 (parenthesized_expression (type . "SEQ")
			   (members ((type . "STRING")
				     (value . "("))
				    ((type . "CHOICE")
				     (members ((type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . conditional_expression))
							((type . "SYMBOL")
							 (name . assignment_expression))
							((type . "SYMBOL")
							 (name . binary_expression))
							((type . "SYMBOL")
							 (name . unary_expression))
							((type . "SYMBOL")
							 (name . update_expression))
							((type . "SYMBOL")
							 (name . cast_expression))
							((type . "SYMBOL")
							 (name . pointer_expression))
							((type . "SYMBOL")
							 (name . sizeof_expression))
							((type . "SYMBOL")
							 (name . subscript_expression))
							((type . "SYMBOL")
							 (name . call_expression))
							((type . "SYMBOL")
							 (name . field_expression))
							((type . "SYMBOL")
							 (name . compound_literal_expression))
							((type . "SYMBOL")
							 (name . identifier))
							((type . "SYMBOL")
							 (name . number_literal))
							((type . "SYMBOL")
							 (name . string_literal))
							((type . "SYMBOL")
							 (name . true))
							((type . "SYMBOL")
							 (name . false))
							((type . "SYMBOL")
							 (name . null))
							((type . "SYMBOL")
							 (name . concatenated_string))
							((type . "SYMBOL")
							 (name . char_literal))
							((type . "SYMBOL")
							 (name . parenthesized_expression))))
					      ((type . "SYMBOL")
					       (name . comma_expression))))
				    ((type . "STRING")
				     (value . ")"))))
 (initializer_list (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "{"))
			    ((type . "CHOICE")
			     (members ((type . "SEQ")
				       (members ((type . "CHOICE")
						 (members ((type . "SYMBOL")
							   (name . initializer_pair))
							  ((type . "CHOICE")
							   (members ((type . "SYMBOL")
								     (name . conditional_expression))
								    ((type . "SYMBOL")
								     (name . assignment_expression))
								    ((type . "SYMBOL")
								     (name . binary_expression))
								    ((type . "SYMBOL")
								     (name . unary_expression))
								    ((type . "SYMBOL")
								     (name . update_expression))
								    ((type . "SYMBOL")
								     (name . cast_expression))
								    ((type . "SYMBOL")
								     (name . pointer_expression))
								    ((type . "SYMBOL")
								     (name . sizeof_expression))
								    ((type . "SYMBOL")
								     (name . subscript_expression))
								    ((type . "SYMBOL")
								     (name . call_expression))
								    ((type . "SYMBOL")
								     (name . field_expression))
								    ((type . "SYMBOL")
								     (name . compound_literal_expression))
								    ((type . "SYMBOL")
								     (name . identifier))
								    ((type . "SYMBOL")
								     (name . number_literal))
								    ((type . "SYMBOL")
								     (name . string_literal))
								    ((type . "SYMBOL")
								     (name . true))
								    ((type . "SYMBOL")
								     (name . false))
								    ((type . "SYMBOL")
								     (name . null))
								    ((type . "SYMBOL")
								     (name . concatenated_string))
								    ((type . "SYMBOL")
								     (name . char_literal))
								    ((type . "SYMBOL")
								     (name . parenthesized_expression))))
							  ((type . "SYMBOL")
							   (name . initializer_list))))
						((type . "REPEAT")
						 (content (type . "SEQ")
							  (members ((type . "STRING")
								    (value . ","))
								   ((type . "CHOICE")
								    (members ((type . "SYMBOL")
									      (name . initializer_pair))
									     ((type . "CHOICE")
									      (members ((type . "SYMBOL")
											(name . conditional_expression))
										       ((type . "SYMBOL")
											(name . assignment_expression))
										       ((type . "SYMBOL")
											(name . binary_expression))
										       ((type . "SYMBOL")
											(name . unary_expression))
										       ((type . "SYMBOL")
											(name . update_expression))
										       ((type . "SYMBOL")
											(name . cast_expression))
										       ((type . "SYMBOL")
											(name . pointer_expression))
										       ((type . "SYMBOL")
											(name . sizeof_expression))
										       ((type . "SYMBOL")
											(name . subscript_expression))
										       ((type . "SYMBOL")
											(name . call_expression))
										       ((type . "SYMBOL")
											(name . field_expression))
										       ((type . "SYMBOL")
											(name . compound_literal_expression))
										       ((type . "SYMBOL")
											(name . identifier))
										       ((type . "SYMBOL")
											(name . number_literal))
										       ((type . "SYMBOL")
											(name . string_literal))
										       ((type . "SYMBOL")
											(name . true))
										       ((type . "SYMBOL")
											(name . false))
										       ((type . "SYMBOL")
											(name . null))
										       ((type . "SYMBOL")
											(name . concatenated_string))
										       ((type . "SYMBOL")
											(name . char_literal))
										       ((type . "SYMBOL")
											(name . parenthesized_expression))))
									     ((type . "SYMBOL")
									      (name . initializer_list)))))))))
				      ((type . "BLANK"))))
			    ((type . "CHOICE")
			     (members ((type . "STRING")
				       (value . ","))
				      ((type . "BLANK"))))
			    ((type . "STRING")
			     (value . "}"))))
 (initializer_pair (type . "SEQ")
		   (members ((type . "FIELD")
			     (name . "designator")
			     (content (type . "REPEAT1")
				      (content (type . "CHOICE")
					       (members ((type . "SYMBOL")
							 (name . subscript_designator))
							((type . "SYMBOL")
							 (name . field_designator))))))
			    ((type . "STRING")
			     (value . "="))
			    ((type . "FIELD")
			     (name . "value")
			     (content (type . "CHOICE")
				      (members ((type . "CHOICE")
						(members ((type . "SYMBOL")
							  (name . conditional_expression))
							 ((type . "SYMBOL")
							  (name . assignment_expression))
							 ((type . "SYMBOL")
							  (name . binary_expression))
							 ((type . "SYMBOL")
							  (name . unary_expression))
							 ((type . "SYMBOL")
							  (name . update_expression))
							 ((type . "SYMBOL")
							  (name . cast_expression))
							 ((type . "SYMBOL")
							  (name . pointer_expression))
							 ((type . "SYMBOL")
							  (name . sizeof_expression))
							 ((type . "SYMBOL")
							  (name . subscript_expression))
							 ((type . "SYMBOL")
							  (name . call_expression))
							 ((type . "SYMBOL")
							  (name . field_expression))
							 ((type . "SYMBOL")
							  (name . compound_literal_expression))
							 ((type . "SYMBOL")
							  (name . identifier))
							 ((type . "SYMBOL")
							  (name . number_literal))
							 ((type . "SYMBOL")
							  (name . string_literal))
							 ((type . "SYMBOL")
							  (name . true))
							 ((type . "SYMBOL")
							  (name . false))
							 ((type . "SYMBOL")
							  (name . null))
							 ((type . "SYMBOL")
							  (name . concatenated_string))
							 ((type . "SYMBOL")
							  (name . char_literal))
							 ((type . "SYMBOL")
							  (name . parenthesized_expression))))
					       ((type . "SYMBOL")
						(name . initializer_list)))))))
 (subscript_designator (type . "SEQ")
		       (members ((type . "STRING")
				 (value . "["))
				((type . "CHOICE")
				 (members ((type . "SYMBOL")
					   (name . conditional_expression))
					  ((type . "SYMBOL")
					   (name . assignment_expression))
					  ((type . "SYMBOL")
					   (name . binary_expression))
					  ((type . "SYMBOL")
					   (name . unary_expression))
					  ((type . "SYMBOL")
					   (name . update_expression))
					  ((type . "SYMBOL")
					   (name . cast_expression))
					  ((type . "SYMBOL")
					   (name . pointer_expression))
					  ((type . "SYMBOL")
					   (name . sizeof_expression))
					  ((type . "SYMBOL")
					   (name . subscript_expression))
					  ((type . "SYMBOL")
					   (name . call_expression))
					  ((type . "SYMBOL")
					   (name . field_expression))
					  ((type . "SYMBOL")
					   (name . compound_literal_expression))
					  ((type . "SYMBOL")
					   (name . identifier))
					  ((type . "SYMBOL")
					   (name . number_literal))
					  ((type . "SYMBOL")
					   (name . string_literal))
					  ((type . "SYMBOL")
					   (name . true))
					  ((type . "SYMBOL")
					   (name . false))
					  ((type . "SYMBOL")
					   (name . null))
					  ((type . "SYMBOL")
					   (name . concatenated_string))
					  ((type . "SYMBOL")
					   (name . char_literal))
					  ((type . "SYMBOL")
					   (name . parenthesized_expression))))
				((type . "STRING")
				 (value . "]"))))
 (field_designator (type . "SEQ")
		   (members ((type . "STRING")
			     (value . "."))
			    ((type . "ALIAS")
			     (content (type . "SYMBOL") (name . identifier))
			     (named . t)
			     (value . field_identifier))))
 (number_literal (type . "TOKEN")
		 (content (type . "SEQ")
			  (members ((type . "CHOICE")
				    (members ((type . "PATTERN")
					      (value . "[-\\+]"))
					     ((type . "BLANK"))))
				   ((type . "CHOICE")
				    (members ((type . "CHOICE")
					      (members ((type . "STRING")
							(value . "0x"))
						       ((type . "STRING")
							(value . "0b"))))
					     ((type . "BLANK"))))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "CHOICE")
							(members ((type . "SEQ")
								  (members ((type . "REPEAT1")
									    (content (type . "PATTERN")
										     (value . "[0-9]")))
									   ((type . "REPEAT")
									    (content (type . "SEQ")
										     (members ((type . "STRING")
											       (value . "'"))
											      ((type . "REPEAT1")
											       (content (type . "PATTERN")
													(value . "[0-9]"))))))))
								 ((type . "SEQ")
								  (members ((type . "STRING")
									    (value . "0b"))
									   ((type . "SEQ")
									    (members ((type . "REPEAT1")
										      (content (type . "PATTERN")
											       (value . "[0-9]")))
										     ((type . "REPEAT")
										      (content (type . "SEQ")
											       (members ((type . "STRING")
													 (value . "'"))
													((type . "REPEAT1")
													 (content (type . "PATTERN")
														  (value . "[0-9]"))))))))))
								 ((type . "SEQ")
								  (members ((type . "STRING")
									    (value . "0x"))
									   ((type . "SEQ")
									    (members ((type . "REPEAT1")
										      (content (type . "PATTERN")
											       (value . "[0-9a-fA-F]")))
										     ((type . "REPEAT")
										      (content (type . "SEQ")
											       (members ((type . "STRING")
													 (value . "'"))
													((type . "REPEAT1")
													 (content (type . "PATTERN")
														  (value . "[0-9a-fA-F]"))))))))))))
						       ((type . "CHOICE")
							(members ((type . "SEQ")
								  (members ((type . "STRING")
									    (value . "."))
									   ((type . "CHOICE")
									    (members ((type . "SEQ")
										      (members ((type . "REPEAT1")
												(content (type . "PATTERN")
													 (value . "[0-9a-fA-F]")))
											       ((type . "REPEAT")
												(content (type . "SEQ")
													 (members ((type . "STRING")
														   (value . "'"))
														  ((type . "REPEAT1")
														   (content (type . "PATTERN")
															    (value . "[0-9a-fA-F]"))))))))
										     ((type . "BLANK"))))))
								 ((type . "BLANK"))))))
					     ((type . "SEQ")
					      (members ((type . "STRING")
							(value . "."))
						       ((type . "SEQ")
							(members ((type . "REPEAT1")
								  (content (type . "PATTERN")
									   (value . "[0-9]")))
								 ((type . "REPEAT")
								  (content (type . "SEQ")
									   (members ((type . "STRING")
										     (value . "'"))
										    ((type . "REPEAT1")
										     (content (type . "PATTERN")
											      (value . "[0-9]"))))))))))))
				   ((type . "CHOICE")
				    (members ((type . "SEQ")
					      (members ((type . "PATTERN")
							(value . "[eEpP]"))
						       ((type . "CHOICE")
							(members ((type . "SEQ")
								  (members ((type . "CHOICE")
									    (members ((type . "PATTERN")
										      (value . "[-\\+]"))
										     ((type . "BLANK"))))
									   ((type . "SEQ")
									    (members ((type . "REPEAT1")
										      (content (type . "PATTERN")
											       (value . "[0-9a-fA-F]")))
										     ((type . "REPEAT")
										      (content (type . "SEQ")
											       (members ((type . "STRING")
													 (value . "'"))
													((type . "REPEAT1")
													 (content (type . "PATTERN")
														  (value . "[0-9a-fA-F]"))))))))))
								 ((type . "BLANK"))))))
					     ((type . "BLANK"))))
				   ((type . "REPEAT")
				    (content (type . "CHOICE")
					     (members ((type . "STRING")
						       (value . "u"))
						      ((type . "STRING")
						       (value . "l"))
						      ((type . "STRING")
						       (value . "U"))
						      ((type . "STRING")
						       (value . "L"))
						      ((type . "STRING")
						       (value . "f"))
						      ((type . "STRING")
						       (value . "F"))))))))
 (char_literal (type . "SEQ")
	       (members ((type . "CHOICE")
			 (members ((type . "STRING")
				   (value . "L'"))
				  ((type . "STRING")
				   (value . "u'"))
				  ((type . "STRING")
				   (value . "U'"))
				  ((type . "STRING")
				   (value . "u8'"))
				  ((type . "STRING")
				   (value . "'"))))
			((type . "CHOICE")
			 (members ((type . "SYMBOL")
				   (name . escape_sequence))
				  ((type . "IMMEDIATE_TOKEN")
				   (content (type . "PATTERN")
					    (value . "[^\\n']")))))
			((type . "STRING")
			 (value . "'"))))
 (concatenated_string (type . "SEQ")
		      (members ((type . "SYMBOL")
				(name . string_literal))
			       ((type . "REPEAT1")
				(content (type . "SYMBOL")
					 (name . string_literal)))))
 (string_literal (type . "SEQ")
		 (members ((type . "CHOICE")
			   (members ((type . "STRING")
				     (value . "L\""))
				    ((type . "STRING")
				     (value . "u\""))
				    ((type . "STRING")
				     (value . "U\""))
				    ((type . "STRING")
				     (value . "u8\""))
				    ((type . "STRING")
				     (value . "\""))))
			  ((type . "REPEAT")
			   (content (type . "CHOICE")
				    (members ((type . "IMMEDIATE_TOKEN")
					      (content (type . "PREC")
						       (value . 1)
						       (content (type . "PATTERN")
								(value . "[^\\\\\"\\n]+"))))
					     ((type . "SYMBOL")
					      (name . escape_sequence)))))
			  ((type . "STRING")
			   (value . "\""))))
 (escape_sequence (type . "TOKEN")
		  (content (type . "PREC")
			   (value . 1)
			   (content (type . "SEQ")
				    (members ((type . "STRING")
					      (value . "\\"))
					     ((type . "CHOICE")
					      (members ((type . "PATTERN")
							(value . "[^xuU]"))
						       ((type . "PATTERN")
							(value . "\\d{2,3}"))
						       ((type . "PATTERN")
							(value . "x[0-9a-fA-F]{2,}"))
						       ((type . "PATTERN")
							(value . "u[0-9a-fA-F]{4}"))
						       ((type . "PATTERN")
							(value . "U[0-9a-fA-F]{8}"))))))))
 (system_lib_string (type . "TOKEN")
		    (content (type . "SEQ")
			     (members ((type . "STRING")
				       (value . "<"))
				      ((type . "REPEAT")
				       (content (type . "CHOICE")
						(members ((type . "PATTERN")
							  (value . "[^>\\n]"))
							 ((type . "STRING")
							  (value . "\\>")))))
				      ((type . "STRING")
				       (value . ">")))))
 (true (type . "TOKEN")
       (content (type . "CHOICE")
		(members ((type . "STRING")
			  (value . "TRUE"))
			 ((type . "STRING")
			  (value . "true")))))
 (false (type . "TOKEN")
	(content (type . "CHOICE")
		 (members ((type . "STRING")
			   (value . "FALSE"))
			  ((type . "STRING")
			   (value . "false")))))
 (null (type . "STRING") (value . "NULL"))
 (identifier (type . "PATTERN") (value . "[a-zA-Z_]\\w*"))
 (_type_identifier (type . "ALIAS")
		   (content (type . "SYMBOL") (name . identifier))
		   (named . t)
		   (value . type_identifier))
 (_field_identifier (type . "ALIAS")
		    (content (type . "SYMBOL") (name . identifier))
		    (named . t)
		    (value . field_identifier))
 (_statement_identifier (type . "ALIAS")
			(content (type . "SYMBOL") (name . identifier))
			(named . t)
			(value . statement_identifier))
 (_empty_declaration (type . "SEQ")
		     (members ((type . "CHOICE")
			       (members ((type . "SYMBOL")
					 (name . struct_specifier))
					((type . "SYMBOL")
					 (name . union_specifier))
					((type . "SYMBOL")
					 (name . enum_specifier))
					((type . "SYMBOL")
					 (name . macro_type_specifier))
					((type . "SYMBOL")
					 (name . sized_type_specifier))
					((type . "SYMBOL")
					 (name . primitive_type))
					((type . "ALIAS")
					 (content (type . "SYMBOL")
						  (name . identifier))
					 (named . t)
					 (value . type_identifier))))
			      ((type . "STRING")
			       (value . ";"))))
 (macro_type_specifier (type . "PREC_DYNAMIC")
		       (value . -1)
		       (content (type . "SEQ")
				(members ((type . "FIELD")
					  (name . "name")
					  (content (type . "SYMBOL")
						   (name . identifier)))
					 ((type . "STRING")
					  (value . "("))
					 ((type . "FIELD")
					  (name . "type")
					  (content (type . "SYMBOL")
						   (name . type_descriptor)))
					 ((type . "STRING")
					  (value . ")")))))
 (comment (type . "TOKEN")
	  (content (type . "CHOICE")
		   (members ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "//"))
				      ((type . "PATTERN")
				       (value . "(\\\\(.|\\r?\\n)|[^\\\\\\n])*"))))
			    ((type . "SEQ")
			     (members ((type . "STRING")
				       (value . "/*"))
				      ((type . "PATTERN")
				       (value . "[^*]*\\*+([^/*][^*]*\\*+)*"))
				      ((type . "STRING")
				       (value . "/"))))))))


 tree-edit--identifier-regex
 nil

 tree-edit--supertypes
 '
((translation_unit translation_unit)
 (_top_level_item _top_level_item)
 (preproc_include preproc_include _top_level_item)
 (preproc_def preproc_def _top_level_item _field_declaration_list_item)
 (preproc_function_def preproc_function_def
		       _top_level_item
		       _field_declaration_list_item)
 (preproc_params preproc_params)
 (preproc_call preproc_call _top_level_item _field_declaration_list_item)
 (preproc_if preproc_if _top_level_item _field_declaration_list_item)
 (preproc_ifdef preproc_ifdef _top_level_item _field_declaration_list_item)
 (preproc_else preproc_else)
 (preproc_elif preproc_elif)
 (preproc_if_in_field_declaration_list preproc_if_in_field_declaration_list)
 (preproc_ifdef_in_field_declaration_list preproc_ifdef_in_field_declaration_list)
 (preproc_else_in_field_declaration_list preproc_else_in_field_declaration_list)
 (preproc_elif_in_field_declaration_list preproc_elif_in_field_declaration_list)
 (preproc_directive preproc_directive)
 (preproc_arg preproc_arg)
 (_preproc_expression _preproc_expression)
 (preproc_parenthesized_expression preproc_parenthesized_expression)
 (preproc_defined preproc_defined _preproc_expression)
 (preproc_unary_expression preproc_unary_expression)
 (preproc_call_expression preproc_call_expression)
 (preproc_argument_list preproc_argument_list)
 (preproc_binary_expression preproc_binary_expression)
 (function_definition function_definition _top_level_item)
 (declaration declaration _top_level_item)
 (type_definition type_definition _top_level_item)
 (_declaration_specifiers _declaration_specifiers)
 (linkage_specification linkage_specification _top_level_item)
 (attribute_specifier attribute_specifier)
 (ms_declspec_modifier ms_declspec_modifier)
 (ms_based_modifier ms_based_modifier)
 (ms_call_modifier ms_call_modifier)
 (ms_restrict_modifier ms_restrict_modifier)
 (ms_unsigned_ptr_modifier ms_unsigned_ptr_modifier)
 (ms_signed_ptr_modifier ms_signed_ptr_modifier)
 (ms_unaligned_ptr_modifier ms_unaligned_ptr_modifier)
 (ms_pointer_modifier ms_pointer_modifier)
 (declaration_list declaration_list)
 (_declarator _declarator)
 (_field_declarator _field_declarator)
 (_type_declarator _type_declarator)
 (_abstract_declarator _abstract_declarator)
 (parenthesized_declarator parenthesized_declarator
			   _declarator
			   _field_declarator
			   _type_declarator)
 (parenthesized_field_declarator parenthesized_field_declarator)
 (parenthesized_type_declarator parenthesized_type_declarator)
 (abstract_parenthesized_declarator abstract_parenthesized_declarator
				    _abstract_declarator)
 (pointer_declarator pointer_declarator
		     _declarator
		     _field_declarator
		     _type_declarator)
 (pointer_field_declarator pointer_field_declarator)
 (pointer_type_declarator pointer_type_declarator)
 (abstract_pointer_declarator abstract_pointer_declarator
			      _abstract_declarator)
 (function_declarator function_declarator
		      _declarator
		      _field_declarator
		      _type_declarator)
 (function_field_declarator function_field_declarator)
 (function_type_declarator function_type_declarator)
 (abstract_function_declarator abstract_function_declarator
			       _abstract_declarator)
 (array_declarator array_declarator
		   _declarator
		   _field_declarator
		   _type_declarator)
 (array_field_declarator array_field_declarator)
 (array_type_declarator array_type_declarator)
 (abstract_array_declarator abstract_array_declarator _abstract_declarator)
 (init_declarator init_declarator)
 (compound_statement compound_statement
		     _top_level_item
		     _statement
		     _non_case_statement)
 (storage_class_specifier storage_class_specifier)
 (type_qualifier type_qualifier)
 (_type_specifier _type_specifier)
 (sized_type_specifier sized_type_specifier
		       _declaration_specifiers
		       _type_specifier)
 (primitive_type primitive_type _declaration_specifiers _type_specifier)
 (enum_specifier enum_specifier _declaration_specifiers _type_specifier)
 (enumerator_list enumerator_list)
 (struct_specifier struct_specifier _declaration_specifiers _type_specifier)
 (union_specifier union_specifier _declaration_specifiers _type_specifier)
 (field_declaration_list field_declaration_list)
 (_field_declaration_list_item _field_declaration_list_item)
 (field_declaration field_declaration _field_declaration_list_item)
 (bitfield_clause bitfield_clause)
 (enumerator enumerator)
 (parameter_list parameter_list)
 (parameter_declaration parameter_declaration)
 (_statement _statement)
 (_non_case_statement _non_case_statement)
 (labeled_statement labeled_statement
		    _top_level_item
		    _statement
		    _non_case_statement)
 (expression_statement expression_statement
		       _top_level_item
		       _statement
		       _non_case_statement)
 (if_statement if_statement _top_level_item _statement _non_case_statement)
 (switch_statement switch_statement
		   _top_level_item
		   _statement
		   _non_case_statement)
 (case_statement case_statement _top_level_item _statement)
 (while_statement while_statement
		  _top_level_item
		  _statement
		  _non_case_statement)
 (do_statement do_statement _top_level_item _statement _non_case_statement)
 (for_statement for_statement _top_level_item _statement _non_case_statement)
 (return_statement return_statement
		   _top_level_item
		   _statement
		   _non_case_statement)
 (break_statement break_statement
		  _top_level_item
		  _statement
		  _non_case_statement)
 (continue_statement continue_statement
		     _top_level_item
		     _statement
		     _non_case_statement)
 (goto_statement goto_statement
		 _top_level_item
		 _statement
		 _non_case_statement)
 (_expression _expression)
 (comma_expression comma_expression)
 (conditional_expression conditional_expression _expression)
 (_assignment_left_expression _assignment_left_expression)
 (assignment_expression assignment_expression _expression)
 (pointer_expression pointer_expression
		     _expression
		     _assignment_left_expression)
 (unary_expression unary_expression _preproc_expression _expression)
 (binary_expression binary_expression _preproc_expression _expression)
 (update_expression update_expression _expression)
 (cast_expression cast_expression _expression)
 (type_descriptor type_descriptor)
 (sizeof_expression sizeof_expression _expression)
 (subscript_expression subscript_expression
		       _expression
		       _assignment_left_expression)
 (call_expression call_expression
		  _preproc_expression
		  _expression
		  _assignment_left_expression)
 (argument_list argument_list)
 (field_expression field_expression _expression _assignment_left_expression)
 (compound_literal_expression compound_literal_expression _expression)
 (parenthesized_expression parenthesized_expression
			   _preproc_expression
			   _expression
			   _assignment_left_expression)
 (initializer_list initializer_list)
 (initializer_pair initializer_pair)
 (subscript_designator subscript_designator)
 (field_designator field_designator)
 (number_literal number_literal _preproc_expression _expression)
 (char_literal char_literal _preproc_expression _expression)
 (concatenated_string concatenated_string _expression)
 (string_literal string_literal _expression)
 (escape_sequence escape_sequence)
 (system_lib_string system_lib_string)
 (true true _expression)
 (false false _expression)
 (null null _expression)
 (identifier identifier
	     _preproc_expression
	     _declarator
	     _expression
	     _assignment_left_expression)
 (_type_identifier _type_identifier)
 (_field_identifier _field_identifier)
 (_statement_identifier _statement_identifier)
 (_empty_declaration _empty_declaration)
 (macro_type_specifier macro_type_specifier
		       _declaration_specifiers
		       _type_specifier)
 (comment comment))


 tree-edit--subtypes
 '
((comment comment)
 (macro_type_specifier macro_type_specifier)
 (_empty_declaration _empty_declaration)
 (_statement_identifier _statement_identifier)
 (_field_identifier _field_identifier)
 (_type_identifier _type_identifier)
 (identifier identifier)
 (null null)
 (false false)
 (true true)
 (system_lib_string system_lib_string)
 (escape_sequence escape_sequence)
 (string_literal string_literal)
 (concatenated_string concatenated_string)
 (char_literal char_literal)
 (number_literal number_literal)
 (field_designator field_designator)
 (subscript_designator subscript_designator)
 (initializer_pair initializer_pair)
 (initializer_list initializer_list)
 (parenthesized_expression parenthesized_expression)
 (compound_literal_expression compound_literal_expression)
 (field_expression field_expression)
 (argument_list argument_list)
 (call_expression call_expression)
 (subscript_expression subscript_expression)
 (sizeof_expression sizeof_expression)
 (type_descriptor type_descriptor)
 (cast_expression cast_expression)
 (update_expression update_expression)
 (binary_expression binary_expression)
 (unary_expression unary_expression)
 (pointer_expression pointer_expression)
 (assignment_expression assignment_expression)
 (_assignment_left_expression identifier
			      parenthesized_expression
			      field_expression
			      call_expression
			      subscript_expression
			      pointer_expression
			      _assignment_left_expression)
 (conditional_expression conditional_expression)
 (comma_expression comma_expression)
 (_expression identifier
	      null
	      false
	      true
	      string_literal
	      concatenated_string
	      char_literal
	      number_literal
	      parenthesized_expression
	      compound_literal_expression
	      field_expression
	      call_expression
	      subscript_expression
	      sizeof_expression
	      cast_expression
	      update_expression
	      binary_expression
	      unary_expression
	      pointer_expression
	      assignment_expression
	      conditional_expression
	      _expression)
 (goto_statement goto_statement)
 (continue_statement continue_statement)
 (break_statement break_statement)
 (return_statement return_statement)
 (for_statement for_statement)
 (do_statement do_statement)
 (while_statement while_statement)
 (case_statement case_statement)
 (switch_statement switch_statement)
 (if_statement if_statement)
 (expression_statement expression_statement)
 (labeled_statement labeled_statement)
 (parameter_declaration parameter_declaration)
 (parameter_list parameter_list)
 (enumerator enumerator)
 (bitfield_clause bitfield_clause)
 (field_declaration field_declaration)
 (field_declaration_list field_declaration_list)
 (union_specifier union_specifier)
 (struct_specifier struct_specifier)
 (enumerator_list enumerator_list)
 (enum_specifier enum_specifier)
 (primitive_type primitive_type)
 (sized_type_specifier sized_type_specifier)
 (_type_specifier macro_type_specifier
		  union_specifier
		  struct_specifier
		  enum_specifier
		  primitive_type
		  sized_type_specifier
		  _type_specifier)
 (type_qualifier type_qualifier)
 (storage_class_specifier storage_class_specifier)
 (_non_case_statement goto_statement
		      continue_statement
		      break_statement
		      return_statement
		      for_statement
		      do_statement
		      while_statement
		      switch_statement
		      if_statement
		      expression_statement
		      labeled_statement
		      _non_case_statement
		      compound_statement)
 (_statement goto_statement
	     continue_statement
	     break_statement
	     return_statement
	     for_statement
	     do_statement
	     while_statement
	     case_statement
	     switch_statement
	     if_statement
	     expression_statement
	     labeled_statement
	     _statement
	     compound_statement)
 (compound_statement compound_statement)
 (init_declarator init_declarator)
 (abstract_array_declarator abstract_array_declarator)
 (array_type_declarator array_type_declarator)
 (array_field_declarator array_field_declarator)
 (array_declarator array_declarator)
 (abstract_function_declarator abstract_function_declarator)
 (function_type_declarator function_type_declarator)
 (function_field_declarator function_field_declarator)
 (function_declarator function_declarator)
 (abstract_pointer_declarator abstract_pointer_declarator)
 (pointer_type_declarator pointer_type_declarator)
 (pointer_field_declarator pointer_field_declarator)
 (pointer_declarator pointer_declarator)
 (abstract_parenthesized_declarator abstract_parenthesized_declarator)
 (parenthesized_type_declarator parenthesized_type_declarator)
 (parenthesized_field_declarator parenthesized_field_declarator)
 (parenthesized_declarator parenthesized_declarator)
 (_abstract_declarator abstract_array_declarator
		       abstract_function_declarator
		       abstract_pointer_declarator
		       abstract_parenthesized_declarator
		       _abstract_declarator)
 (_type_declarator array_declarator
		   function_declarator
		   pointer_declarator
		   parenthesized_declarator
		   _type_declarator)
 (_field_declarator array_declarator
		    function_declarator
		    pointer_declarator
		    parenthesized_declarator
		    _field_declarator)
 (_declarator identifier
	      array_declarator
	      function_declarator
	      pointer_declarator
	      parenthesized_declarator
	      _declarator)
 (declaration_list declaration_list)
 (ms_pointer_modifier ms_pointer_modifier)
 (ms_unaligned_ptr_modifier ms_unaligned_ptr_modifier)
 (ms_signed_ptr_modifier ms_signed_ptr_modifier)
 (ms_unsigned_ptr_modifier ms_unsigned_ptr_modifier)
 (ms_restrict_modifier ms_restrict_modifier)
 (ms_call_modifier ms_call_modifier)
 (ms_based_modifier ms_based_modifier)
 (ms_declspec_modifier ms_declspec_modifier)
 (attribute_specifier attribute_specifier)
 (linkage_specification linkage_specification)
 (_declaration_specifiers macro_type_specifier
			  union_specifier
			  struct_specifier
			  enum_specifier
			  primitive_type
			  sized_type_specifier
			  _declaration_specifiers)
 (type_definition type_definition)
 (declaration declaration)
 (function_definition function_definition)
 (preproc_binary_expression preproc_binary_expression)
 (preproc_argument_list preproc_argument_list)
 (preproc_call_expression preproc_call_expression)
 (preproc_unary_expression preproc_unary_expression)
 (preproc_defined preproc_defined)
 (preproc_parenthesized_expression preproc_parenthesized_expression)
 (_preproc_expression identifier
		      char_literal
		      number_literal
		      parenthesized_expression
		      call_expression
		      binary_expression
		      unary_expression
		      preproc_defined
		      _preproc_expression)
 (preproc_arg preproc_arg)
 (preproc_directive preproc_directive)
 (preproc_elif_in_field_declaration_list preproc_elif_in_field_declaration_list)
 (preproc_else_in_field_declaration_list preproc_else_in_field_declaration_list)
 (preproc_ifdef_in_field_declaration_list preproc_ifdef_in_field_declaration_list)
 (preproc_if_in_field_declaration_list preproc_if_in_field_declaration_list)
 (preproc_elif preproc_elif)
 (preproc_else preproc_else)
 (preproc_ifdef preproc_ifdef)
 (preproc_if preproc_if)
 (preproc_call preproc_call)
 (preproc_params preproc_params)
 (preproc_function_def preproc_function_def)
 (_field_declaration_list_item field_declaration
			       _field_declaration_list_item
			       preproc_ifdef
			       preproc_if
			       preproc_call
			       preproc_function_def
			       preproc_def)
 (preproc_def preproc_def)
 (preproc_include preproc_include)
 (_top_level_item goto_statement
		  continue_statement
		  break_statement
		  return_statement
		  for_statement
		  do_statement
		  while_statement
		  case_statement
		  switch_statement
		  if_statement
		  expression_statement
		  labeled_statement
		  compound_statement
		  linkage_specification
		  type_definition
		  declaration
		  function_definition
		  preproc_ifdef
		  preproc_if
		  preproc_call
		  preproc_function_def
		  preproc_def
		  preproc_include
		  _top_level_item)
 (translation_unit translation_unit))


 tree-edit--alias-map
 '
((translation_unit (identifier . type_identifier))
 (_top_level_item (identifier . type_identifier))
 (preproc_include (preproc_call_expression . call_expression))
 (preproc_def)
 (preproc_function_def)
 (preproc_params)
 (preproc_call)
 (preproc_if (preproc_call_expression . call_expression)
	     (preproc_unary_expression . unary_expression)
	     (preproc_binary_expression . binary_expression)
	     (preproc_parenthesized_expression . parenthesized_expression)
	     (identifier . type_identifier))
 (preproc_ifdef (identifier . type_identifier))
 (preproc_else (identifier . type_identifier))
 (preproc_elif (preproc_call_expression . call_expression)
	       (preproc_unary_expression . unary_expression)
	       (preproc_binary_expression . binary_expression)
	       (preproc_parenthesized_expression . parenthesized_expression)
	       (identifier . type_identifier))
 (preproc_if_in_field_declaration_list (preproc_call_expression . call_expression)
				       (preproc_unary_expression . unary_expression)
				       (preproc_binary_expression . binary_expression)
				       (preproc_parenthesized_expression . parenthesized_expression)
				       (preproc_if_in_field_declaration_list . preproc_if)
				       (preproc_ifdef_in_field_declaration_list . preproc_ifdef)
				       (preproc_else_in_field_declaration_list . preproc_else)
				       (preproc_elif_in_field_declaration_list . preproc_elif))
 (preproc_ifdef_in_field_declaration_list (preproc_if_in_field_declaration_list . preproc_if)
					  (preproc_ifdef_in_field_declaration_list . preproc_ifdef)
					  (preproc_else_in_field_declaration_list . preproc_else)
					  (preproc_elif_in_field_declaration_list . preproc_elif))
 (preproc_else_in_field_declaration_list (preproc_if_in_field_declaration_list . preproc_if)
					 (preproc_ifdef_in_field_declaration_list . preproc_ifdef))
 (preproc_elif_in_field_declaration_list (preproc_call_expression . call_expression)
					 (preproc_unary_expression . unary_expression)
					 (preproc_binary_expression . binary_expression)
					 (preproc_parenthesized_expression . parenthesized_expression)
					 (preproc_if_in_field_declaration_list . preproc_if)
					 (preproc_ifdef_in_field_declaration_list . preproc_ifdef)
					 (preproc_else_in_field_declaration_list . preproc_else)
					 (preproc_elif_in_field_declaration_list . preproc_elif))
 (preproc_directive)
 (preproc_arg)
 (_preproc_expression (preproc_call_expression . call_expression)
		      (preproc_unary_expression . unary_expression)
		      (preproc_binary_expression . binary_expression)
		      (preproc_parenthesized_expression . parenthesized_expression))
 (preproc_parenthesized_expression (preproc_call_expression . call_expression)
				   (preproc_unary_expression . unary_expression)
				   (preproc_binary_expression . binary_expression)
				   (preproc_parenthesized_expression . parenthesized_expression))
 (preproc_defined)
 (preproc_unary_expression (preproc_call_expression . call_expression)
			   (preproc_unary_expression . unary_expression)
			   (preproc_binary_expression . binary_expression)
			   (preproc_parenthesized_expression . parenthesized_expression))
 (preproc_call_expression (preproc_argument_list . argument_list))
 (preproc_argument_list (preproc_call_expression . call_expression)
			(preproc_unary_expression . unary_expression)
			(preproc_binary_expression . binary_expression)
			(preproc_parenthesized_expression . parenthesized_expression)
			(preproc_call_expression . call_expression)
			(preproc_unary_expression . unary_expression)
			(preproc_binary_expression . binary_expression)
			(preproc_parenthesized_expression . parenthesized_expression))
 (preproc_binary_expression (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression)
			    (preproc_call_expression . call_expression)
			    (preproc_unary_expression . unary_expression)
			    (preproc_binary_expression . binary_expression)
			    (preproc_parenthesized_expression . parenthesized_expression))
 (function_definition (identifier . type_identifier))
 (declaration (identifier . type_identifier))
 (type_definition (identifier . type_identifier)
		  (pointer_type_declarator . pointer_declarator)
		  (function_type_declarator . function_declarator)
		  (array_type_declarator . array_declarator)
		  (parenthesized_type_declarator . parenthesized_declarator)
		  (identifier . type_identifier)
		  (pointer_type_declarator . pointer_declarator)
		  (function_type_declarator . function_declarator)
		  (array_type_declarator . array_declarator)
		  (parenthesized_type_declarator . parenthesized_declarator)
		  (identifier . type_identifier))
 (_declaration_specifiers (identifier . type_identifier))
 (linkage_specification)
 (attribute_specifier)
 (ms_declspec_modifier)
 (ms_based_modifier)
 (ms_call_modifier)
 (ms_restrict_modifier)
 (ms_unsigned_ptr_modifier)
 (ms_signed_ptr_modifier)
 (ms_unaligned_ptr_modifier)
 (ms_pointer_modifier)
 (declaration_list (identifier . type_identifier))
 (_declarator)
 (_field_declarator (pointer_field_declarator . pointer_declarator)
		    (function_field_declarator . function_declarator)
		    (array_field_declarator . array_declarator)
		    (parenthesized_field_declarator . parenthesized_declarator)
		    (identifier . field_identifier))
 (_type_declarator (pointer_type_declarator . pointer_declarator)
		   (function_type_declarator . function_declarator)
		   (array_type_declarator . array_declarator)
		   (parenthesized_type_declarator . parenthesized_declarator)
		   (identifier . type_identifier))
 (_abstract_declarator)
 (parenthesized_declarator)
 (parenthesized_field_declarator (pointer_field_declarator . pointer_declarator)
				 (function_field_declarator . function_declarator)
				 (array_field_declarator . array_declarator)
				 (parenthesized_field_declarator . parenthesized_declarator)
				 (identifier . field_identifier))
 (parenthesized_type_declarator (pointer_type_declarator . pointer_declarator)
				(function_type_declarator . function_declarator)
				(array_type_declarator . array_declarator)
				(parenthesized_type_declarator . parenthesized_declarator)
				(identifier . type_identifier))
 (abstract_parenthesized_declarator)
 (pointer_declarator)
 (pointer_field_declarator (pointer_field_declarator . pointer_declarator)
			   (function_field_declarator . function_declarator)
			   (array_field_declarator . array_declarator)
			   (parenthesized_field_declarator . parenthesized_declarator)
			   (identifier . field_identifier))
 (pointer_type_declarator (pointer_type_declarator . pointer_declarator)
			  (function_type_declarator . function_declarator)
			  (array_type_declarator . array_declarator)
			  (parenthesized_type_declarator . parenthesized_declarator)
			  (identifier . type_identifier))
 (abstract_pointer_declarator)
 (function_declarator)
 (function_field_declarator (pointer_field_declarator . pointer_declarator)
			    (function_field_declarator . function_declarator)
			    (array_field_declarator . array_declarator)
			    (parenthesized_field_declarator . parenthesized_declarator)
			    (identifier . field_identifier))
 (function_type_declarator (pointer_type_declarator . pointer_declarator)
			   (function_type_declarator . function_declarator)
			   (array_type_declarator . array_declarator)
			   (parenthesized_type_declarator . parenthesized_declarator)
			   (identifier . type_identifier))
 (abstract_function_declarator)
 (array_declarator)
 (array_field_declarator (pointer_field_declarator . pointer_declarator)
			 (function_field_declarator . function_declarator)
			 (array_field_declarator . array_declarator)
			 (parenthesized_field_declarator . parenthesized_declarator)
			 (identifier . field_identifier))
 (array_type_declarator (pointer_type_declarator . pointer_declarator)
			(function_type_declarator . function_declarator)
			(array_type_declarator . array_declarator)
			(parenthesized_type_declarator . parenthesized_declarator)
			(identifier . type_identifier))
 (abstract_array_declarator)
 (init_declarator)
 (compound_statement (identifier . type_identifier))
 (storage_class_specifier)
 (type_qualifier)
 (_type_specifier (identifier . type_identifier))
 (sized_type_specifier (identifier . type_identifier))
 (primitive_type)
 (enum_specifier (identifier . type_identifier))
 (enumerator_list)
 (struct_specifier (identifier . type_identifier))
 (union_specifier (identifier . type_identifier))
 (field_declaration_list (preproc_if_in_field_declaration_list . preproc_if)
			 (preproc_ifdef_in_field_declaration_list . preproc_ifdef))
 (_field_declaration_list_item (preproc_if_in_field_declaration_list . preproc_if)
			       (preproc_ifdef_in_field_declaration_list . preproc_ifdef))
 (field_declaration (identifier . type_identifier)
		    (pointer_field_declarator . pointer_declarator)
		    (function_field_declarator . function_declarator)
		    (array_field_declarator . array_declarator)
		    (parenthesized_field_declarator . parenthesized_declarator)
		    (identifier . field_identifier)
		    (pointer_field_declarator . pointer_declarator)
		    (function_field_declarator . function_declarator)
		    (array_field_declarator . array_declarator)
		    (parenthesized_field_declarator . parenthesized_declarator)
		    (identifier . field_identifier))
 (bitfield_clause)
 (enumerator)
 (parameter_list)
 (parameter_declaration (identifier . type_identifier))
 (_statement)
 (_non_case_statement)
 (labeled_statement (identifier . statement_identifier))
 (expression_statement)
 (if_statement)
 (switch_statement)
 (case_statement)
 (while_statement)
 (do_statement)
 (for_statement)
 (return_statement)
 (break_statement)
 (continue_statement)
 (goto_statement (identifier . statement_identifier))
 (_expression)
 (comma_expression)
 (conditional_expression)
 (_assignment_left_expression)
 (assignment_expression)
 (pointer_expression)
 (unary_expression)
 (binary_expression)
 (update_expression)
 (cast_expression)
 (type_descriptor (identifier . type_identifier))
 (sizeof_expression)
 (subscript_expression)
 (call_expression)
 (argument_list)
 (field_expression (identifier . field_identifier))
 (compound_literal_expression)
 (parenthesized_expression)
 (initializer_list)
 (initializer_pair)
 (subscript_designator)
 (field_designator (identifier . field_identifier))
 (number_literal)
 (char_literal)
 (concatenated_string)
 (string_literal)
 (escape_sequence)
 (system_lib_string)
 (true)
 (false)
 (null)
 (identifier)
 (_type_identifier (identifier . type_identifier))
 (_field_identifier (identifier . field_identifier))
 (_statement_identifier (identifier . statement_identifier))
 (_empty_declaration (identifier . type_identifier))
 (macro_type_specifier)
 (comment))


 tree-edit--containing-types
 '
((translation_unit function_definition
		   linkage_specification
		   declaration
		   case_statement
		   labeled_statement
		   compound_statement
		   expression_statement
		   if_statement
		   switch_statement
		   do_statement
		   while_statement
		   for_statement
		   return_statement
		   break_statement
		   continue_statement
		   goto_statement
		   type_definition
		   struct_specifier
		   union_specifier
		   enum_specifier
		   macro_type_specifier
		   sized_type_specifier
		   primitive_type
		   type_identifier
		   preproc_if
		   preproc_ifdef
		   preproc_include
		   preproc_def
		   preproc_function_def
		   preproc_call)
 (_top_level_item function_definition
		  linkage_specification
		  declaration
		  case_statement
		  labeled_statement
		  compound_statement
		  expression_statement
		  if_statement
		  switch_statement
		  do_statement
		  while_statement
		  for_statement
		  return_statement
		  break_statement
		  continue_statement
		  goto_statement
		  type_definition
		  struct_specifier
		  union_specifier
		  enum_specifier
		  macro_type_specifier
		  sized_type_specifier
		  primitive_type
		  type_identifier
		  preproc_if
		  preproc_ifdef
		  preproc_include
		  preproc_def
		  preproc_function_def
		  preproc_call)
 (preproc_include \#include
		  string_literal
		  system_lib_string
		  identifier
		  call_expression)
 (preproc_def \#define identifier preproc_arg)
 (preproc_function_def \#define identifier preproc_params preproc_arg)
 (preproc_params identifier identifier)
 (preproc_call preproc_directive preproc_arg)
 (preproc_if \#if
	     identifier
	     call_expression
	     number_literal
	     char_literal
	     preproc_defined
	     unary_expression
	     binary_expression
	     parenthesized_expression
	     function_definition
	     linkage_specification
	     declaration
	     case_statement
	     labeled_statement
	     compound_statement
	     expression_statement
	     if_statement
	     switch_statement
	     do_statement
	     while_statement
	     for_statement
	     return_statement
	     break_statement
	     continue_statement
	     goto_statement
	     type_definition
	     struct_specifier
	     union_specifier
	     enum_specifier
	     macro_type_specifier
	     sized_type_specifier
	     primitive_type
	     type_identifier
	     preproc_if
	     preproc_ifdef
	     preproc_include
	     preproc_def
	     preproc_function_def
	     preproc_call
	     preproc_else
	     preproc_elif
	     \#endif)
 (preproc_ifdef \#ifdef
		\#ifndef
		identifier
		function_definition
		linkage_specification
		declaration
		case_statement
		labeled_statement
		compound_statement
		expression_statement
		if_statement
		switch_statement
		do_statement
		while_statement
		for_statement
		return_statement
		break_statement
		continue_statement
		goto_statement
		type_definition
		struct_specifier
		union_specifier
		enum_specifier
		macro_type_specifier
		sized_type_specifier
		primitive_type
		type_identifier
		preproc_if
		preproc_ifdef
		preproc_include
		preproc_def
		preproc_function_def
		preproc_call
		preproc_else
		preproc_elif
		\#endif)
 (preproc_else \#else
	       function_definition
	       linkage_specification
	       declaration
	       case_statement
	       labeled_statement
	       compound_statement
	       expression_statement
	       if_statement
	       switch_statement
	       do_statement
	       while_statement
	       for_statement
	       return_statement
	       break_statement
	       continue_statement
	       goto_statement
	       type_definition
	       struct_specifier
	       union_specifier
	       enum_specifier
	       macro_type_specifier
	       sized_type_specifier
	       primitive_type
	       type_identifier
	       preproc_if
	       preproc_ifdef
	       preproc_include
	       preproc_def
	       preproc_function_def
	       preproc_call)
 (preproc_elif \#elif
	       identifier
	       call_expression
	       number_literal
	       char_literal
	       preproc_defined
	       unary_expression
	       binary_expression
	       parenthesized_expression
	       function_definition
	       linkage_specification
	       declaration
	       case_statement
	       labeled_statement
	       compound_statement
	       expression_statement
	       if_statement
	       switch_statement
	       do_statement
	       while_statement
	       for_statement
	       return_statement
	       break_statement
	       continue_statement
	       goto_statement
	       type_definition
	       struct_specifier
	       union_specifier
	       enum_specifier
	       macro_type_specifier
	       sized_type_specifier
	       primitive_type
	       type_identifier
	       preproc_if
	       preproc_ifdef
	       preproc_include
	       preproc_def
	       preproc_function_def
	       preproc_call
	       preproc_else
	       preproc_elif)
 (preproc_if_in_field_declaration_list \#if
				       identifier
				       call_expression
				       number_literal
				       char_literal
				       preproc_defined
				       unary_expression
				       binary_expression
				       parenthesized_expression
				       field_declaration
				       preproc_def
				       preproc_function_def
				       preproc_call
				       preproc_if
				       preproc_ifdef
				       preproc_else
				       preproc_elif
				       \#endif)
 (preproc_ifdef_in_field_declaration_list \#ifdef
					  \#ifndef
					  identifier
					  field_declaration
					  preproc_def
					  preproc_function_def
					  preproc_call
					  preproc_if
					  preproc_ifdef
					  preproc_else
					  preproc_elif
					  \#endif)
 (preproc_else_in_field_declaration_list \#else
					 field_declaration
					 preproc_def
					 preproc_function_def
					 preproc_call
					 preproc_if
					 preproc_ifdef)
 (preproc_elif_in_field_declaration_list \#elif
					 identifier
					 call_expression
					 number_literal
					 char_literal
					 preproc_defined
					 unary_expression
					 binary_expression
					 parenthesized_expression
					 field_declaration
					 preproc_def
					 preproc_function_def
					 preproc_call
					 preproc_if
					 preproc_ifdef
					 preproc_else
					 preproc_elif)
 (preproc_directive)
 (preproc_arg)
 (_preproc_expression identifier
		      call_expression
		      number_literal
		      char_literal
		      preproc_defined
		      unary_expression
		      binary_expression
		      parenthesized_expression)
 (preproc_parenthesized_expression identifier
				   call_expression
				   number_literal
				   char_literal
				   preproc_defined
				   unary_expression
				   binary_expression
				   parenthesized_expression)
 (preproc_defined identifier identifier)
 (preproc_unary_expression identifier
			   call_expression
			   number_literal
			   char_literal
			   preproc_defined
			   unary_expression
			   binary_expression
			   parenthesized_expression)
 (preproc_call_expression identifier argument_list)
 (preproc_argument_list identifier
			call_expression
			number_literal
			char_literal
			preproc_defined
			unary_expression
			binary_expression
			parenthesized_expression
			identifier
			call_expression
			number_literal
			char_literal
			preproc_defined
			unary_expression
			binary_expression
			parenthesized_expression)
 (preproc_binary_expression identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression
			    identifier
			    call_expression
			    number_literal
			    char_literal
			    preproc_defined
			    unary_expression
			    binary_expression
			    parenthesized_expression)
 (function_definition ms_call_modifier
		      storage_class_specifier
		      type_qualifier
		      attribute_specifier
		      ms_declspec_modifier
		      struct_specifier
		      union_specifier
		      enum_specifier
		      macro_type_specifier
		      sized_type_specifier
		      primitive_type
		      type_identifier
		      storage_class_specifier
		      type_qualifier
		      attribute_specifier
		      ms_declspec_modifier
		      pointer_declarator
		      function_declarator
		      array_declarator
		      parenthesized_declarator
		      identifier
		      compound_statement)
 (declaration storage_class_specifier
	      type_qualifier
	      attribute_specifier
	      ms_declspec_modifier
	      struct_specifier
	      union_specifier
	      enum_specifier
	      macro_type_specifier
	      sized_type_specifier
	      primitive_type
	      type_identifier
	      storage_class_specifier
	      type_qualifier
	      attribute_specifier
	      ms_declspec_modifier
	      pointer_declarator
	      function_declarator
	      array_declarator
	      parenthesized_declarator
	      identifier
	      init_declarator
	      pointer_declarator
	      function_declarator
	      array_declarator
	      parenthesized_declarator
	      identifier
	      init_declarator)
 (type_definition type_qualifier
		  struct_specifier
		  union_specifier
		  enum_specifier
		  macro_type_specifier
		  sized_type_specifier
		  primitive_type
		  type_identifier
		  pointer_declarator
		  function_declarator
		  array_declarator
		  parenthesized_declarator
		  type_identifier
		  pointer_declarator
		  function_declarator
		  array_declarator
		  parenthesized_declarator
		  type_identifier)
 (_declaration_specifiers storage_class_specifier
			  type_qualifier
			  attribute_specifier
			  ms_declspec_modifier
			  struct_specifier
			  union_specifier
			  enum_specifier
			  macro_type_specifier
			  sized_type_specifier
			  primitive_type
			  type_identifier
			  storage_class_specifier
			  type_qualifier
			  attribute_specifier
			  ms_declspec_modifier)
 (linkage_specification string_literal
			function_definition
			declaration
			declaration_list)
 (attribute_specifier argument_list)
 (ms_declspec_modifier identifier)
 (ms_based_modifier argument_list)
 (ms_call_modifier)
 (ms_restrict_modifier)
 (ms_unsigned_ptr_modifier)
 (ms_signed_ptr_modifier)
 (ms_unaligned_ptr_modifier)
 (ms_pointer_modifier ms_unaligned_ptr_modifier
		      ms_restrict_modifier
		      ms_unsigned_ptr_modifier
		      ms_signed_ptr_modifier)
 (declaration_list function_definition
		   linkage_specification
		   declaration
		   case_statement
		   labeled_statement
		   compound_statement
		   expression_statement
		   if_statement
		   switch_statement
		   do_statement
		   while_statement
		   for_statement
		   return_statement
		   break_statement
		   continue_statement
		   goto_statement
		   type_definition
		   struct_specifier
		   union_specifier
		   enum_specifier
		   macro_type_specifier
		   sized_type_specifier
		   primitive_type
		   type_identifier
		   preproc_if
		   preproc_ifdef
		   preproc_include
		   preproc_def
		   preproc_function_def
		   preproc_call)
 (_declarator pointer_declarator
	      function_declarator
	      array_declarator
	      parenthesized_declarator
	      identifier)
 (_field_declarator pointer_declarator
		    function_declarator
		    array_declarator
		    parenthesized_declarator
		    field_identifier)
 (_type_declarator pointer_declarator
		   function_declarator
		   array_declarator
		   parenthesized_declarator
		   type_identifier)
 (_abstract_declarator abstract_pointer_declarator
		       abstract_function_declarator
		       abstract_array_declarator
		       abstract_parenthesized_declarator)
 (parenthesized_declarator pointer_declarator
			   function_declarator
			   array_declarator
			   parenthesized_declarator
			   identifier)
 (parenthesized_field_declarator pointer_declarator
				 function_declarator
				 array_declarator
				 parenthesized_declarator
				 field_identifier)
 (parenthesized_type_declarator pointer_declarator
				function_declarator
				array_declarator
				parenthesized_declarator
				type_identifier)
 (abstract_parenthesized_declarator abstract_pointer_declarator
				    abstract_function_declarator
				    abstract_array_declarator
				    abstract_parenthesized_declarator)
 (pointer_declarator ms_based_modifier
		     ms_pointer_modifier
		     type_qualifier
		     pointer_declarator
		     function_declarator
		     array_declarator
		     parenthesized_declarator
		     identifier)
 (pointer_field_declarator ms_based_modifier
			   ms_pointer_modifier
			   type_qualifier
			   pointer_declarator
			   function_declarator
			   array_declarator
			   parenthesized_declarator
			   field_identifier)
 (pointer_type_declarator ms_based_modifier
			  ms_pointer_modifier
			  type_qualifier
			  pointer_declarator
			  function_declarator
			  array_declarator
			  parenthesized_declarator
			  type_identifier)
 (abstract_pointer_declarator type_qualifier
			      abstract_pointer_declarator
			      abstract_function_declarator
			      abstract_array_declarator
			      abstract_parenthesized_declarator)
 (function_declarator pointer_declarator
		      function_declarator
		      array_declarator
		      parenthesized_declarator
		      identifier
		      parameter_list
		      attribute_specifier)
 (function_field_declarator pointer_declarator
			    function_declarator
			    array_declarator
			    parenthesized_declarator
			    field_identifier
			    parameter_list)
 (function_type_declarator pointer_declarator
			   function_declarator
			   array_declarator
			   parenthesized_declarator
			   type_identifier
			   parameter_list)
 (abstract_function_declarator abstract_pointer_declarator
			       abstract_function_declarator
			       abstract_array_declarator
			       abstract_parenthesized_declarator
			       parameter_list)
 (array_declarator pointer_declarator
		   function_declarator
		   array_declarator
		   parenthesized_declarator
		   identifier
		   type_qualifier
		   conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression)
 (array_field_declarator pointer_declarator
			 function_declarator
			 array_declarator
			 parenthesized_declarator
			 field_identifier
			 type_qualifier
			 conditional_expression
			 assignment_expression
			 binary_expression
			 unary_expression
			 update_expression
			 cast_expression
			 pointer_expression
			 sizeof_expression
			 subscript_expression
			 call_expression
			 field_expression
			 compound_literal_expression
			 identifier
			 number_literal
			 string_literal
			 true
			 false
			 null
			 concatenated_string
			 char_literal
			 parenthesized_expression)
 (array_type_declarator pointer_declarator
			function_declarator
			array_declarator
			parenthesized_declarator
			type_identifier
			type_qualifier
			conditional_expression
			assignment_expression
			binary_expression
			unary_expression
			update_expression
			cast_expression
			pointer_expression
			sizeof_expression
			subscript_expression
			call_expression
			field_expression
			compound_literal_expression
			identifier
			number_literal
			string_literal
			true
			false
			null
			concatenated_string
			char_literal
			parenthesized_expression)
 (abstract_array_declarator abstract_pointer_declarator
			    abstract_function_declarator
			    abstract_array_declarator
			    abstract_parenthesized_declarator
			    type_qualifier
			    conditional_expression
			    assignment_expression
			    binary_expression
			    unary_expression
			    update_expression
			    cast_expression
			    pointer_expression
			    sizeof_expression
			    subscript_expression
			    call_expression
			    field_expression
			    compound_literal_expression
			    identifier
			    number_literal
			    string_literal
			    true
			    false
			    null
			    concatenated_string
			    char_literal
			    parenthesized_expression)
 (init_declarator pointer_declarator
		  function_declarator
		  array_declarator
		  parenthesized_declarator
		  identifier
		  initializer_list
		  conditional_expression
		  assignment_expression
		  binary_expression
		  unary_expression
		  update_expression
		  cast_expression
		  pointer_expression
		  sizeof_expression
		  subscript_expression
		  call_expression
		  field_expression
		  compound_literal_expression
		  identifier
		  number_literal
		  string_literal
		  true
		  false
		  null
		  concatenated_string
		  char_literal
		  parenthesized_expression)
 (compound_statement function_definition
		     linkage_specification
		     declaration
		     case_statement
		     labeled_statement
		     compound_statement
		     expression_statement
		     if_statement
		     switch_statement
		     do_statement
		     while_statement
		     for_statement
		     return_statement
		     break_statement
		     continue_statement
		     goto_statement
		     type_definition
		     struct_specifier
		     union_specifier
		     enum_specifier
		     macro_type_specifier
		     sized_type_specifier
		     primitive_type
		     type_identifier
		     preproc_if
		     preproc_ifdef
		     preproc_include
		     preproc_def
		     preproc_function_def
		     preproc_call)
 (storage_class_specifier)
 (type_qualifier)
 (_type_specifier struct_specifier
		  union_specifier
		  enum_specifier
		  macro_type_specifier
		  sized_type_specifier
		  primitive_type
		  type_identifier)
 (sized_type_specifier type_identifier primitive_type)
 (primitive_type)
 (enum_specifier type_identifier enumerator_list enumerator_list)
 (enumerator_list enumerator enumerator)
 (struct_specifier ms_declspec_modifier
		   type_identifier
		   field_declaration_list
		   field_declaration_list)
 (union_specifier ms_declspec_modifier
		  type_identifier
		  field_declaration_list
		  field_declaration_list)
 (field_declaration_list field_declaration
			 preproc_def
			 preproc_function_def
			 preproc_call
			 preproc_if
			 preproc_ifdef)
 (_field_declaration_list_item field_declaration
			       preproc_def
			       preproc_function_def
			       preproc_call
			       preproc_if
			       preproc_ifdef)
 (field_declaration storage_class_specifier
		    type_qualifier
		    attribute_specifier
		    ms_declspec_modifier
		    struct_specifier
		    union_specifier
		    enum_specifier
		    macro_type_specifier
		    sized_type_specifier
		    primitive_type
		    type_identifier
		    storage_class_specifier
		    type_qualifier
		    attribute_specifier
		    ms_declspec_modifier
		    pointer_declarator
		    function_declarator
		    array_declarator
		    parenthesized_declarator
		    field_identifier
		    pointer_declarator
		    function_declarator
		    array_declarator
		    parenthesized_declarator
		    field_identifier
		    bitfield_clause)
 (bitfield_clause conditional_expression
		  assignment_expression
		  binary_expression
		  unary_expression
		  update_expression
		  cast_expression
		  pointer_expression
		  sizeof_expression
		  subscript_expression
		  call_expression
		  field_expression
		  compound_literal_expression
		  identifier
		  number_literal
		  string_literal
		  true
		  false
		  null
		  concatenated_string
		  char_literal
		  parenthesized_expression)
 (enumerator identifier
	     conditional_expression
	     assignment_expression
	     binary_expression
	     unary_expression
	     update_expression
	     cast_expression
	     pointer_expression
	     sizeof_expression
	     subscript_expression
	     call_expression
	     field_expression
	     compound_literal_expression
	     identifier
	     number_literal
	     string_literal
	     true
	     false
	     null
	     concatenated_string
	     char_literal
	     parenthesized_expression)
 (parameter_list parameter_declaration parameter_declaration)
 (parameter_declaration storage_class_specifier
			type_qualifier
			attribute_specifier
			ms_declspec_modifier
			struct_specifier
			union_specifier
			enum_specifier
			macro_type_specifier
			sized_type_specifier
			primitive_type
			type_identifier
			storage_class_specifier
			type_qualifier
			attribute_specifier
			ms_declspec_modifier
			pointer_declarator
			function_declarator
			array_declarator
			parenthesized_declarator
			identifier
			abstract_pointer_declarator
			abstract_function_declarator
			abstract_array_declarator
			abstract_parenthesized_declarator)
 (_statement case_statement
	     labeled_statement
	     compound_statement
	     expression_statement
	     if_statement
	     switch_statement
	     do_statement
	     while_statement
	     for_statement
	     return_statement
	     break_statement
	     continue_statement
	     goto_statement)
 (_non_case_statement labeled_statement
		      compound_statement
		      expression_statement
		      if_statement
		      switch_statement
		      do_statement
		      while_statement
		      for_statement
		      return_statement
		      break_statement
		      continue_statement
		      goto_statement)
 (labeled_statement statement_identifier
		    case_statement
		    labeled_statement
		    compound_statement
		    expression_statement
		    if_statement
		    switch_statement
		    do_statement
		    while_statement
		    for_statement
		    return_statement
		    break_statement
		    continue_statement
		    goto_statement)
 (expression_statement conditional_expression
		       assignment_expression
		       binary_expression
		       unary_expression
		       update_expression
		       cast_expression
		       pointer_expression
		       sizeof_expression
		       subscript_expression
		       call_expression
		       field_expression
		       compound_literal_expression
		       identifier
		       number_literal
		       string_literal
		       true
		       false
		       null
		       concatenated_string
		       char_literal
		       parenthesized_expression
		       comma_expression)
 (if_statement parenthesized_expression
	       case_statement
	       labeled_statement
	       compound_statement
	       expression_statement
	       if_statement
	       switch_statement
	       do_statement
	       while_statement
	       for_statement
	       return_statement
	       break_statement
	       continue_statement
	       goto_statement
	       case_statement
	       labeled_statement
	       compound_statement
	       expression_statement
	       if_statement
	       switch_statement
	       do_statement
	       while_statement
	       for_statement
	       return_statement
	       break_statement
	       continue_statement
	       goto_statement)
 (switch_statement parenthesized_expression compound_statement)
 (case_statement conditional_expression
		 assignment_expression
		 binary_expression
		 unary_expression
		 update_expression
		 cast_expression
		 pointer_expression
		 sizeof_expression
		 subscript_expression
		 call_expression
		 field_expression
		 compound_literal_expression
		 identifier
		 number_literal
		 string_literal
		 true
		 false
		 null
		 concatenated_string
		 char_literal
		 parenthesized_expression
		 labeled_statement
		 compound_statement
		 expression_statement
		 if_statement
		 switch_statement
		 do_statement
		 while_statement
		 for_statement
		 return_statement
		 break_statement
		 continue_statement
		 goto_statement
		 declaration
		 type_definition)
 (while_statement parenthesized_expression
		  case_statement
		  labeled_statement
		  compound_statement
		  expression_statement
		  if_statement
		  switch_statement
		  do_statement
		  while_statement
		  for_statement
		  return_statement
		  break_statement
		  continue_statement
		  goto_statement)
 (do_statement case_statement
	       labeled_statement
	       compound_statement
	       expression_statement
	       if_statement
	       switch_statement
	       do_statement
	       while_statement
	       for_statement
	       return_statement
	       break_statement
	       continue_statement
	       goto_statement
	       parenthesized_expression)
 (for_statement declaration
		conditional_expression
		assignment_expression
		binary_expression
		unary_expression
		update_expression
		cast_expression
		pointer_expression
		sizeof_expression
		subscript_expression
		call_expression
		field_expression
		compound_literal_expression
		identifier
		number_literal
		string_literal
		true
		false
		null
		concatenated_string
		char_literal
		parenthesized_expression
		comma_expression
		conditional_expression
		assignment_expression
		binary_expression
		unary_expression
		update_expression
		cast_expression
		pointer_expression
		sizeof_expression
		subscript_expression
		call_expression
		field_expression
		compound_literal_expression
		identifier
		number_literal
		string_literal
		true
		false
		null
		concatenated_string
		char_literal
		parenthesized_expression
		conditional_expression
		assignment_expression
		binary_expression
		unary_expression
		update_expression
		cast_expression
		pointer_expression
		sizeof_expression
		subscript_expression
		call_expression
		field_expression
		compound_literal_expression
		identifier
		number_literal
		string_literal
		true
		false
		null
		concatenated_string
		char_literal
		parenthesized_expression
		comma_expression
		case_statement
		labeled_statement
		compound_statement
		expression_statement
		if_statement
		switch_statement
		do_statement
		while_statement
		for_statement
		return_statement
		break_statement
		continue_statement
		goto_statement)
 (return_statement conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   comma_expression)
 (break_statement)
 (continue_statement)
 (goto_statement statement_identifier)
 (_expression conditional_expression
	      assignment_expression
	      binary_expression
	      unary_expression
	      update_expression
	      cast_expression
	      pointer_expression
	      sizeof_expression
	      subscript_expression
	      call_expression
	      field_expression
	      compound_literal_expression
	      identifier
	      number_literal
	      string_literal
	      true
	      false
	      null
	      concatenated_string
	      char_literal
	      parenthesized_expression)
 (comma_expression conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   comma_expression)
 (conditional_expression conditional_expression
			 assignment_expression
			 binary_expression
			 unary_expression
			 update_expression
			 cast_expression
			 pointer_expression
			 sizeof_expression
			 subscript_expression
			 call_expression
			 field_expression
			 compound_literal_expression
			 identifier
			 number_literal
			 string_literal
			 true
			 false
			 null
			 concatenated_string
			 char_literal
			 parenthesized_expression
			 conditional_expression
			 assignment_expression
			 binary_expression
			 unary_expression
			 update_expression
			 cast_expression
			 pointer_expression
			 sizeof_expression
			 subscript_expression
			 call_expression
			 field_expression
			 compound_literal_expression
			 identifier
			 number_literal
			 string_literal
			 true
			 false
			 null
			 concatenated_string
			 char_literal
			 parenthesized_expression
			 conditional_expression
			 assignment_expression
			 binary_expression
			 unary_expression
			 update_expression
			 cast_expression
			 pointer_expression
			 sizeof_expression
			 subscript_expression
			 call_expression
			 field_expression
			 compound_literal_expression
			 identifier
			 number_literal
			 string_literal
			 true
			 false
			 null
			 concatenated_string
			 char_literal
			 parenthesized_expression)
 (_assignment_left_expression identifier
			      call_expression
			      field_expression
			      pointer_expression
			      subscript_expression
			      parenthesized_expression)
 (assignment_expression identifier
			call_expression
			field_expression
			pointer_expression
			subscript_expression
			parenthesized_expression
			conditional_expression
			assignment_expression
			binary_expression
			unary_expression
			update_expression
			cast_expression
			pointer_expression
			sizeof_expression
			subscript_expression
			call_expression
			field_expression
			compound_literal_expression
			identifier
			number_literal
			string_literal
			true
			false
			null
			concatenated_string
			char_literal
			parenthesized_expression)
 (pointer_expression conditional_expression
		     assignment_expression
		     binary_expression
		     unary_expression
		     update_expression
		     cast_expression
		     pointer_expression
		     sizeof_expression
		     subscript_expression
		     call_expression
		     field_expression
		     compound_literal_expression
		     identifier
		     number_literal
		     string_literal
		     true
		     false
		     null
		     concatenated_string
		     char_literal
		     parenthesized_expression)
 (unary_expression conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression)
 (binary_expression conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression)
 (update_expression conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression)
 (cast_expression type_descriptor
		  conditional_expression
		  assignment_expression
		  binary_expression
		  unary_expression
		  update_expression
		  cast_expression
		  pointer_expression
		  sizeof_expression
		  subscript_expression
		  call_expression
		  field_expression
		  compound_literal_expression
		  identifier
		  number_literal
		  string_literal
		  true
		  false
		  null
		  concatenated_string
		  char_literal
		  parenthesized_expression)
 (type_descriptor type_qualifier
		  struct_specifier
		  union_specifier
		  enum_specifier
		  macro_type_specifier
		  sized_type_specifier
		  primitive_type
		  type_identifier
		  type_qualifier
		  abstract_pointer_declarator
		  abstract_function_declarator
		  abstract_array_declarator
		  abstract_parenthesized_declarator)
 (sizeof_expression conditional_expression
		    assignment_expression
		    binary_expression
		    unary_expression
		    update_expression
		    cast_expression
		    pointer_expression
		    sizeof_expression
		    subscript_expression
		    call_expression
		    field_expression
		    compound_literal_expression
		    identifier
		    number_literal
		    string_literal
		    true
		    false
		    null
		    concatenated_string
		    char_literal
		    parenthesized_expression
		    type_descriptor)
 (subscript_expression conditional_expression
		       assignment_expression
		       binary_expression
		       unary_expression
		       update_expression
		       cast_expression
		       pointer_expression
		       sizeof_expression
		       subscript_expression
		       call_expression
		       field_expression
		       compound_literal_expression
		       identifier
		       number_literal
		       string_literal
		       true
		       false
		       null
		       concatenated_string
		       char_literal
		       parenthesized_expression
		       conditional_expression
		       assignment_expression
		       binary_expression
		       unary_expression
		       update_expression
		       cast_expression
		       pointer_expression
		       sizeof_expression
		       subscript_expression
		       call_expression
		       field_expression
		       compound_literal_expression
		       identifier
		       number_literal
		       string_literal
		       true
		       false
		       null
		       concatenated_string
		       char_literal
		       parenthesized_expression)
 (call_expression conditional_expression
		  assignment_expression
		  binary_expression
		  unary_expression
		  update_expression
		  cast_expression
		  pointer_expression
		  sizeof_expression
		  subscript_expression
		  call_expression
		  field_expression
		  compound_literal_expression
		  identifier
		  number_literal
		  string_literal
		  true
		  false
		  null
		  concatenated_string
		  char_literal
		  parenthesized_expression
		  argument_list)
 (argument_list conditional_expression
		assignment_expression
		binary_expression
		unary_expression
		update_expression
		cast_expression
		pointer_expression
		sizeof_expression
		subscript_expression
		call_expression
		field_expression
		compound_literal_expression
		identifier
		number_literal
		string_literal
		true
		false
		null
		concatenated_string
		char_literal
		parenthesized_expression
		conditional_expression
		assignment_expression
		binary_expression
		unary_expression
		update_expression
		cast_expression
		pointer_expression
		sizeof_expression
		subscript_expression
		call_expression
		field_expression
		compound_literal_expression
		identifier
		number_literal
		string_literal
		true
		false
		null
		concatenated_string
		char_literal
		parenthesized_expression)
 (field_expression conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   field_identifier)
 (compound_literal_expression type_descriptor initializer_list)
 (parenthesized_expression conditional_expression
			   assignment_expression
			   binary_expression
			   unary_expression
			   update_expression
			   cast_expression
			   pointer_expression
			   sizeof_expression
			   subscript_expression
			   call_expression
			   field_expression
			   compound_literal_expression
			   identifier
			   number_literal
			   string_literal
			   true
			   false
			   null
			   concatenated_string
			   char_literal
			   parenthesized_expression
			   comma_expression)
 (initializer_list initializer_pair
		   conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   initializer_list
		   initializer_pair
		   conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   initializer_list)
 (initializer_pair subscript_designator
		   field_designator
		   conditional_expression
		   assignment_expression
		   binary_expression
		   unary_expression
		   update_expression
		   cast_expression
		   pointer_expression
		   sizeof_expression
		   subscript_expression
		   call_expression
		   field_expression
		   compound_literal_expression
		   identifier
		   number_literal
		   string_literal
		   true
		   false
		   null
		   concatenated_string
		   char_literal
		   parenthesized_expression
		   initializer_list)
 (subscript_designator conditional_expression
		       assignment_expression
		       binary_expression
		       unary_expression
		       update_expression
		       cast_expression
		       pointer_expression
		       sizeof_expression
		       subscript_expression
		       call_expression
		       field_expression
		       compound_literal_expression
		       identifier
		       number_literal
		       string_literal
		       true
		       false
		       null
		       concatenated_string
		       char_literal
		       parenthesized_expression)
 (field_designator field_identifier)
 (number_literal)
 (char_literal escape_sequence)
 (concatenated_string string_literal string_literal)
 (string_literal escape_sequence)
 (escape_sequence)
 (system_lib_string)
 (true)
 (false)
 (null)
 (identifier)
 (_type_identifier type_identifier)
 (_field_identifier field_identifier)
 (_statement_identifier statement_identifier)
 (_empty_declaration struct_specifier
		     union_specifier
		     enum_specifier
		     macro_type_specifier
		     sized_type_specifier
		     primitive_type
		     type_identifier)
 (macro_type_specifier identifier type_descriptor)
 (comment))
)

(provide 'tree-edit-c-grammar)
;;; tree-edit-c-grammar.el ends here